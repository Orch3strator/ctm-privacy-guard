{
  "ZZM_UC_B2B_NBRDNG_USR" : {
    "Type" : "Folder",
    "Variables" : [ {
      "ZZM_CTM_ENVIRONMENT" : "fahrschule"
    }, {
      "ZZM_B2B_SITE" : "Fahrschule"
    }, {
      "ZZM_B2B_SHARED_VIRTUAL_FOLDER" : "Distributed Energy Resources"
    }, {
      "ZZM_B2B_VIRTUAL_FOLDER" : "mftuser"
    }, {
      "ZZM_B2B_GROUP" : "Board"
    }, {
      "ZZM_COMPANY" : "BMC"
    }, {
      "ZZM_USER_ID" : "mftuser"
    }, {
      "ZZM_GPG_KEY_IMPORT_SOURCE_PATH" : "/opt/ctmag/ctm/cm/AFT/ftshome/b2bhome/%%ZZM_USER_ID/onboarding"
    }, {
      "ZZM_USER_EMAIL" : "mftuser@bmc.com"
    }, {
      "ZZM_GPG_PUBLIC_FILE_NAME" : ""
    }, {
      "ZZM_GPG_PUBLIC_KEY_ASC" : ""
    }, {
      "ZZM_GPG_PRIVATE_KEY_ASC" : ""
    }, {
      "ZZM_GPG_PRIVATE_FILE_NAME" : ""
    }, {
      "ZZM_GPG_PUBLIC_FILE_PATH" : ""
    }, {
      "ZZM_GPG_PRIVATE_FILE_PATH" : ""
    }, {
      "ZZM_GPG_INFO_FILE_PATH" : ""
    }, {
      "ZZM_PREFIX" : ""
    }, {
      "ZZM_GPG_KEY_PASSPHRASE" : ""
    } ],
    "ControlmServer" : "ctm-lin-srv",
    "Description" : "ZZM Onboarding, process incoming file with single user",
    "OrderMethod" : "Manual",
    "ActiveRetentionPolicy" : "CleanEndedOK",
    "RunAs" : "ctmag",
    "SubApplication" : "Onboarding %%ZZM_USER_ID",
    "CreatedBy" : "emadmin",
    "Application" : "ZZM %%ZZM_COMPANY",
    "When" : {
      "RuleBasedCalendars" : {
        "Included" : [ "Empty" ],
        "Empty" : {
          "Type" : "Calendar:RuleBased",
          "When" : {
            "DaysRelation" : "OR",
            "WeekDays" : [ "NONE" ],
            "Months" : [ "NONE" ],
            "MonthDays" : [ "NONE" ]
          }
        }
      }
    },
    "MPS4ANOBAORD" : {
      "Type" : "Resource:Lock",
      "LockType" : "Shared"
    },
    "ZZM_UC_B2B_NBRDNG_USR_SUB_GPG" : {
      "Type" : "SubFolder",
      "SubApplication" : "Onboarding %%ZZM_USER_ID",
      "AdjustEvents" : false,
      "CreatedBy" : "emadmin",
      "RunAs" : "ctmag",
      "Application" : "ZZM %%ZZM_COMPANY",
      "When" : {
        "DaysRelation" : "OR"
      },
      "ZZM GPG Clear Agent" : {
        "Type" : "Job:EmbeddedScript",
        "Script" : "#!/bin/bash\\nset +x\\n# shellcheck enable=require-variable-braces\\n# file name: zzm.gpg.delete.key.sh\\n################################################################################\\n# License                                                                      #\\n################################################################################\\nfunction license() {\\n    # On MAC update bash: https://scriptingosx.com/2019/02/install-bash-5-on-macos/\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" GPL-3.0-only or GPL-3.0-or-later\"\\n    printf '%s\\n' \" Copyright (c) 2023 BMC Software, Inc.\"\\n    printf '%s\\n' \" Author: Volker Scheithauer\"\\n    printf '%s\\n' \" E-Mail: orchestrator@bmc.com\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is free software: you can redistribute it and/or modify\"\\n    printf '%s\\n' \" it under the terms of the GNU General Public License as published by\"\\n    printf '%s\\n' \" the Free Software Foundation, either version 3 of the License, or\"\\n    printf '%s\\n' \" (at your option) any later version.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is distributed in the hope that it will be useful,\"\\n    printf '%s\\n' \" but WITHOUT ANY WARRANTY; without even the implied warranty of\"\\n    printf '%s\\n' \" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\"\\n    printf '%s\\n' \" GNU General Public License for more details.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" You should have received a copy of the GNU General Public License\"\\n    printf '%s\\n' \" along with this program.  If not, see <https://www.gnu.org/licenses/>.\"\\n}\\n\\nfunction ctmLogo() {\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \"  @@@@@@@   @@@@@@   @@@  @@@  @@@@@@@  @@@@@@@    @@@@@@   @@@                  @@@@@@@@@@   \"\\n    printf '%s\\n' \" @@@@@@@@  @@@@@@@@  @@@@ @@@  @@@@@@@  @@@@@@@@  @@@@@@@@  @@@                  @@@@@@@@@@@  \"\\n    printf '%s\\n' \" !@@       @@!  @@@  @@!@!@@@    @@!    @@!  @@@  @@!  @@@  @@!                  @@! @@! @@!  \"\\n    printf '%s\\n' \" !@!       !@!  @!@  !@!!@!@!    !@!    !@!  @!@  !@!  @!@  !@!                  !@! !@! !@!  \"\\n    printf '%s\\n' \" !@!       @!@  !@!  @!@ !!@!    @!!    @!@!!@!   @!@  !@!  @!!       @!@!@!@!@  @!! !!@ @!@  \"\\n    printf '%s\\n' \" !!!       !@!  !!!  !@!  !!!    !!!    !!@!@!    !@!  !!!  !!!       !!!@!@!!!  !@!   ! !@!  \"\\n    printf '%s\\n' \" :!!       !!:  !!!  !!:  !!!    !!:    !!: :!!   !!:  !!!  !!:                  !!:     !!:  \"\\n    printf '%s\\n' \" :!:       :!:  !:!  :!:  !:!    :!:    :!:  !:!  :!:  !:!   :!:                 :!:     :!:  \"\\n    printf '%s\\n' \"  ::: :::  ::::: ::   ::   ::     ::    ::   :::  ::::: ::   :: ::::             :::     ::   \"\\n    printf '%s\\n' \"  :: :: :   : :  :   ::    :      :      :   : :   : :  :   : :: : :              :      :    \"\\n    printf '%s\\n' \"\"\\n}\\n\\n# Get current script folder\\n# shellcheck disable=SC2046 # this is intentional\\nDIR_NAME=$(cd $(dirname \"${BASH_SOURCE[0]}\") && pwd)\\nDIR_PARENT_NAME=$(dirname \"$(dirname \"$(readlink -f \"${BASH_SOURCE[0]}\")\")\")\\n\\n# compute working and config dir\\n# check if write permission\\nif [ -w \"${DIR_PARENT_NAME}\" ]; then\\n    WORKING_DIR=\"${DIR_PARENT_NAME}/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nelse\\n    WORKING_DIR=\"/tmp/zzm/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nfi\\n\\n# create working directory\\nif [ ! -d \"${WORKING_DIR}\" ]; then\\n    mkdir -p \"${WORKING_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${WORKING_DIR}\" -R\\n    chmod g+wrx \"${WORKING_DIR}\" -R\\nfi\\n\\nSCRIPT_SETTINGS=\"${CONFIG_DIR}/setup.settings.ini\"\\nSCRIPT_DATA_FILE=\"${WORKING_DIR}/data.json\"\\n\\n# Reset Colors\\n# shellcheck disable=SC2034 # this is intentional\\nColor_Off='\\033[0m' # Text Reset\\n\\n# Regular Colors\\n# shellcheck disable=SC2034 # this is intentional\\nBlack='\\033[0;30m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nRed='\\033[0;31m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nGreen='\\033[0;32m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nYellow='\\033[0;33m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nBlue='\\033[0;34m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nPurple='\\033[0;35m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nCyan='\\033[0;36m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nWhite='\\033[0;37m' # White\\n\\n# import bash colors\\nif [[ -f \"${SCRIPT_SETTINGS}\" ]]; then\\n    # shellcheck disable=SC1090 disable=SC2283 # this is intentional\\n    source <(grep = \"${SCRIPT_SETTINGS}\")\\nfi\\n\\n# Script defaults\\n# shellcheck disable=SC2034 # this is intentional\\nretcode=0\\n# shellcheck disable=SC2034 # this is intentional\\nSETUP_DIR=\"${DIR_NAME}\"\\n# shellcheck disable=SC2034 # this is intentional\\nSUDO_STATE=\"false\"\\n# shellcheck disable=SC2116 # this is intentional\\nSCRIPT_SHELL=$(echo \"${SHELL}\")\\n\\n# hostname is assumed to be a FQDN set during installation.\\n# shellcheck disable=SC2006 disable=SC2086 # this is intentional\\nHOST_FQDN=$(cat /etc/hostname)\\n# shellcheck disable=SC2006 disable=SC2086 # this is intentional\\nHOST_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $1}')\\n# shellcheck disable=SC2086 disable=SC2034 # this is intentional\\nDOMAIN_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $2\".\"$3}')\\n# shellcheck disable=SC2006 disable=SC2086 # this is intentional\\nHOST_IPV4=$(ip address | grep -v \"127.0.0\" | grep \"inet \" | awk '{print $2}' | awk -F \"/\" '{print $1}' | head -n 1)\\n\\nDATE_TODAY=\"$(date '+%Y-%m-%d %H:%M:%S')\"\\nLOG_DATE=$(date +%Y%m%d)\\n\\n# check if write permission\\nif [ -w \"/var/log\" ]; then\\n    LOG_DIR=\"/var/log/zzm\"\\nelse\\n    LOG_DIR=\"${WORKING_DIR}/log\"\\nfi\\n\\nif [ ! -d \"${LOG_DIR}\" ]; then\\n    mkdir -p \"${LOG_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${LOG_DIR}\" -R\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nLOG_NAME=$(basename $0)\\nLOG_FILE=\"${LOG_DIR}/${LOG_NAME}.${LOG_DATE}.txt\"\\nif [[ ! -f \"${LOG_FILE}\" ]]; then\\n    echo ' .' | tee -a \"${LOG_FILE}\"\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nSCRIPT_NAME=\"${LOG_NAME}\"\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nSCRIPT_PURPOSE=\"delete gpg private and public keys\"\\n\\nlicense\\nctmLogo\\n\\n# Extract the script parameters / shell variables\\n# CTM OS Job variables\\n\\n# VAR_ZZM_COMPANY -> %%ZZM_COMPANY\\n# VAR_ZZM_USER_ID -> %%ZZM_USER_ID\\n# VAR_ZZM_USER_EMAIL-> %%ZZM_USER_EMAIL\\n# VAR_ZZM_ZZM_CTM_ENVIRONMENT -> %%ZZM_ZZM_CTM_ENVIRONMENT\\n\\n# VAR_ZZM_AWS_S3_BUCKET -> %%ZZM_AWS_S3_BUCKET\\n# VAR_ZZM_AZURE_CONTAINER -> %%ZZM_AZURE_CONTAINER\\n# VAR_ZZM_GCS_BUCKET -> %%ZZM_GCS_BUCKET\\n# VAR_ZZM_OCI_BUCKET -> %%ZZM_OCI_BUCKET\\n# VAR_ZZM_FILE_NAME -> %%ZZM_FILE_NAME\\n# VAR_ZZM_VIRTUAL_FOLDER -> %%ZZM_VIRTUAL_FOLDER\\n# VAR_ZZM_SUB_DIR_PATH -> %%ZZM_SUB_DIR_PATH\\n# VAR_ZZM_FILE_ABS_PATH -> %%ZZM_FILE_ABS_PATH\\n# VAR_ZZM_FILE_PATH -> %%ZZM_FILE_PATH\\n# VAR_ZZM_FILE_DIR -> %%ZZM_FILE_DIR\\n# VAR_ZZM_FILE_ABS_DIR -> %%ZZM_FILE_ABS_DIR\\n# VAR_ZZM_FILE_EXT_NO_DOT -> %%ZZM_FILE_EXT_NO_DOT\\n\\n# VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER -> %%ZZM_ZZM_B2B_VIRTUAL_FOLDER\\n# VAR_ZZM_B2B_GROUP -> %%ZZM_B2B_GROUP\\n# VAR_ZZM_ZZM_B2B_SITE -> %%ZZM_ZZM_B2B_SITE\\n# VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER -> %%ZZM_B2B_SHARED_VIRTUAL_FOLDER\\n\\n# initialize b2b variables\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_COMPANY=$(env | grep \"VAR_ZZM_COMPANY\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_USER_ID=$(env | grep \"VAR_ZZM_USER_ID\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_USER_EMAIL=$(env | grep \"VAR_ZZM_USER_EMAIL\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_CTM_ENVIRONMENT=$(env | grep \"VAR_ZZM_CTM_ENVIRONMENT\" | awk -F \"=\" '{print $2}')\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AWS_S3_BUCKET=$(env | grep \"VAR_ZZM_AWS_S3_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AZURE_CONTAINER=$(env | grep \"VAR_ZZM_AZURE_CONTAINER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_GCS_BUCKET=$(env | grep \"VAR_ZZM_GCS_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_OCI_BUCKET=$(env | grep \"VAR_ZZM_OCI_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_NAME=$(env | grep \"VAR_ZZM_FILE_NAME\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_SUB_DIR_PATH=$(env | grep \"VAR_ZZM_SUB_DIR_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_PATH=$(env | grep \"VAR_ZZM_FILE_ABS_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_PATH=$(env | grep \"VAR_ZZM_FILE_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_DIR=$(env | grep \"VAR_ZZM_FILE_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_DIR=$(env | grep \"VAR_ZZM_FILE_ABS_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_EXT_NO_DOT=$(env | grep \"VAR_ZZM_FILE_EXT_NO_DOT\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_ZZM_B2B_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_GROUP=$(env | grep \"VAR_ZZM_B2B_GROUP\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SITE=$(env | grep \"VAR_ZZM_B2B_SITE\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SHARED_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n\\nlog() {\\n    echo \" -----------------------------------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" Start date          : ${DATE_TODAY}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Shell Name          : ${SCRIPT_SHELL}\" | tee -a \"${LOG_FILE}\"\\n    echo \" User Name           : ${USER}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host FDQN           : ${HOST_FQDN}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host Name           : ${HOST_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host IPv4           : ${HOST_IPV4}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Script Folder       : ${DIR_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Working Folder      : ${WORKING_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Config Folder       : ${CONFIG_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Data File           : ${SCRIPT_DATA_FILE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" Parent Folder       : ${DIR_PARENT_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Data Folder         : ${WORKING_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Config Folder       : ${CONFIG_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Binary          : ${GPG_BIN}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Name        : ${GPG_KEY_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key E-Mail      : ${GPG_KEY_EMAIL}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Data Folder     : ${GPG_KEY_WORKING_FOLDER}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Pub Path    : ${GPG_KEY_EXPORT_PATH_PUBLIC}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Priv Path   : ${GPG_KEY_EXPORT_PATH_PRIVATE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Pub File    : ${GPG_KEY_EXPORT_FILE_PUBLIC}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Priv File   : ${GPG_KEY_EXPORT_FILE_PRIVATE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key List        : ${GPG_KEY_LIST_CSV}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Status          : ${GPG_KEY_STATUS}\" | tee -a \"${LOG_FILE}\"\\n    echo \"  \" | tee -a \"${LOG_FILE}\"\\n}\\n\\n# Assign GPG binary\\nGPG_BIN=$(which gpg)\\n\\n# Replace \" \" with \"_\"\\n# shellcheck disable=SC2006 disable=SC2001 # this is intentional\\nGPG_KEY_NAME=$(echo \"${ZZM_USER_ID}\" | sed 's/ /_/g')\\nGPG_KEY_NAME_LCASE=$(echo \"${ZZM_USER_ID}\" | tr '[:upper:]' '[:lower:]')\\n\\n# assign email\\nGPG_KEY_EMAIL=\"${ZZM_USER_EMAIL}\"\\n\\n# Assign default working folder\\nif [ -z \"${GPG_KEY_WORKING_FOLDER}\" ]; then\\n    GPG_KEY_WORKING_FOLDER=\"${WORKING_DIR}/gpg/${GPG_KEY_NAME_LCASE}\"\\n    if [ ! -d \"${GPG_KEY_WORKING_FOLDER}\" ]; then\\n        mkdir -p \"${GPG_KEY_WORKING_FOLDER}\"\\n    fi\\nfi\\n\\n# Compute Export File Name\\n# GPG in ASCII format\\nGPG_KEY_EXPORT_FILE_PUBLIC=\"${GPG_KEY_NAME_LCASE}.zzm.gpg.pub.asc\"\\nGPG_KEY_EXPORT_FILE_PRIVATE=\"${GPG_KEY_NAME_LCASE}.zzm.gpg.priv.asc\"\\nGPG_KEY_EXPORT_FILE_INFO=\"${GPG_KEY_NAME_LCASE}.zzm.gpg.info.json\"\\n\\nGPG_KEY_EXPORT_PATH_PUBLIC=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_EXPORT_FILE_PUBLIC}\"\\nGPG_KEY_EXPORT_PATH_PRIVATE=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_EXPORT_FILE_PRIVATE}\"\\nGPG_KEY_EXPORT_PATH_INFO=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_EXPORT_FILE_INFO}\"\\n\\n# write gpg text file\\nGPG_KEY_FILE=\"${GPG_KEY_NAME_LCASE}.zzm.gpg.lix\"\\nGPG_KEY_PATH=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_FILE}\"\\n\\n# Delete old files\\nif [ -f \"${GPG_KEY_EXPORT_PATH_PUBLIC}\" ]; then\\n    rm \"${GPG_KEY_EXPORT_PATH_PUBLIC}\" -rf\\nfi\\n\\nif [ -f \"${GPG_KEY_EXPORT_PATH_PRIVATE}\" ]; then\\n    rm \"${GPG_KEY_EXPORT_PATH_PRIVATE}\" -rf\\nfi\\n\\nif [ -f \"${GPG_KEY_EXPORT_PATH_INFO}\" ]; then\\n    rm \"${GPG_KEY_EXPORT_PATH_INFO}\" -rf\\nfi\\n\\nif [ -f \"${GPG_KEY_PATH}\" ]; then\\n    rm \"${GPG_KEY_PATH}\" -rf\\nfi\\n\\nif [ -d \"${GPG_KEY_WORKING_FOLDER}\" ]; then\\n    rm \"${GPG_KEY_WORKING_FOLDER}\" -rf\\nfi\\n\\n# Process GPG requests\\n# remove any existing keys\\nGPG_KEY_FINGERPRINTS=$(gpg --list-keys --with-fingerprint --with-colons \"${GPG_KEY_NAME}\" 2>/dev/null | grep '^fpr' | cut -d':' -f10)\\n\\n# Loop through all the fingerprints and delete the corresponding key(s)\\nfor GPG_KEY_FINGERPRINT in ${GPG_KEY_FINGERPRINTS}; do\\n    GPG_KEY_RESULT=$(gpg --batch --yes --delete-secret-keys \"${GPG_KEY_FINGERPRINT}\" 2>/dev/null)\\n    # shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\n    GPG_KEY_RESULT=$(gpg --batch --yes --delete-key \"${GPG_KEY_FINGERPRINT}\" 2>/dev/null)\\ndone\\n\\nGPG_KEY_LIST=$(gpg --batch --list-keys --with-colons \"${GPG_KEY_NAME}\" | grep '^fpr' | cut -d':' -f10 | tr '\\n' ',' | sed 's/,$//')\\nGPG_KEY_LIST_CSV=$(echo \"${GPG_KEY_LIST}\" | tr '\\n' ',' | sed 's/,$//')\\n\\nGPG_KEY_STATUS=\"TBD\"\\n# log the result\\nlog\\n\\n# Clean Up\\n",
        "SubApplication" : "Onboarding %%ZZM_USER_ID",
        "FileName" : "zzm.gpg.delete.key.sh",
        "Host" : "ZZM_AGT_HUB",
        "CreatedBy" : "emadmin",
        "Description" : "Remove former GPG content",
        "RunAs" : "ctmag",
        "Application" : "ZZM %%ZZM_COMPANY",
        "Variables" : [ {
          "VAR_ZZM_COMPANY" : "%%ZZM_COMPANY"
        }, {
          "VAR_ZZM_USER_ID" : "%%ZZM_USER_ID"
        }, {
          "VAR_ZZM_USER_EMAIL" : "%%ZZM_USER_EMAIL"
        }, {
          "VAR_ZZM_ZZM_CTM_ENVIRONMENT" : "%%ZZM_ZZM_CTM_ENVIRONMENT"
        } ],
        "When" : {
          "WeekDays" : [ "NONE" ],
          "MonthDays" : [ "NONE" ],
          "DaysRelation" : "OR"
        },
        "eventsToWaitFor" : {
          "Type" : "WaitForEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Transfer-TO-ZZM_GPG_Clear_Agent_%%SMART_ORDERID-190"
          } ]
        },
        "eventsToAdd" : {
          "Type" : "AddEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Clear_Agent-TO-ZZM_GPG_Import_Keys_%%SMART_ORDERID-190"
          } ]
        },
        "eventsToDelete" : {
          "Type" : "DeleteEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Transfer-TO-ZZM_GPG_Clear_Agent_%%SMART_ORDERID-190"
          } ]
        }
      },
      "ZZM GPG Import Keys" : {
        "Type" : "Job:EmbeddedScript",
        "Script" : "#!/bin/bash\\nset +x\\n# shellcheck enable=require-variable-braces\\n# file name: zzm.gpg.import.key.sh\\n# -- Start of boilerplate --\\nprintf \"\\033c\"\\n################################################################################\\n# License                                                                      #\\n################################################################################\\n\\nfunction license() {\\n    # On MAC update bash: https://scriptingosx.com/2019/02/install-bash-5-on-macos/\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" GPL-3.0-only or GPL-3.0-or-later\"\\n    printf '%s\\n' \" Copyright (c) 2023 BMC Software, Inc.\"\\n    printf '%s\\n' \" Author: Volker Scheithauer\"\\n    printf '%s\\n' \" E-Mail: orchestrator@bmc.com\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is free software: you can redistribute it and/or modify\"\\n    printf '%s\\n' \" it under the terms of the GNU General Public License as published by\"\\n    printf '%s\\n' \" the Free Software Foundation, either version 3 of the License, or\"\\n    printf '%s\\n' \" (at your option) any later version.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is distributed in the hope that it will be useful,\"\\n    printf '%s\\n' \" but WITHOUT ANY WARRANTY; without even the implied warranty of\"\\n    printf '%s\\n' \" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\"\\n    printf '%s\\n' \" GNU General Public License for more details.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" You should have received a copy of the GNU General Public License\"\\n    printf '%s\\n' \" along with this program.  If not, see <https://www.gnu.org/licenses/>.\"\\n}\\n\\nfunction ctmLogo() {\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \"  @@@@@@@   @@@@@@   @@@  @@@  @@@@@@@  @@@@@@@    @@@@@@   @@@                  @@@@@@@@@@   \"\\n    printf '%s\\n' \" @@@@@@@@  @@@@@@@@  @@@@ @@@  @@@@@@@  @@@@@@@@  @@@@@@@@  @@@                  @@@@@@@@@@@  \"\\n    printf '%s\\n' \" !@@       @@!  @@@  @@!@!@@@    @@!    @@!  @@@  @@!  @@@  @@!                  @@! @@! @@!  \"\\n    printf '%s\\n' \" !@!       !@!  @!@  !@!!@!@!    !@!    !@!  @!@  !@!  @!@  !@!                  !@! !@! !@!  \"\\n    printf '%s\\n' \" !@!       @!@  !@!  @!@ !!@!    @!!    @!@!!@!   @!@  !@!  @!!       @!@!@!@!@  @!! !!@ @!@  \"\\n    printf '%s\\n' \" !!!       !@!  !!!  !@!  !!!    !!!    !!@!@!    !@!  !!!  !!!       !!!@!@!!!  !@!   ! !@!  \"\\n    printf '%s\\n' \" :!!       !!:  !!!  !!:  !!!    !!:    !!: :!!   !!:  !!!  !!:                  !!:     !!:  \"\\n    printf '%s\\n' \" :!:       :!:  !:!  :!:  !:!    :!:    :!:  !:!  :!:  !:!   :!:                 :!:     :!:  \"\\n    printf '%s\\n' \"  ::: :::  ::::: ::   ::   ::     ::    ::   :::  ::::: ::   :: ::::             :::     ::   \"\\n    printf '%s\\n' \"  :: :: :   : :  :   ::    :      :      :   : :   : :  :   : :: : :              :      :    \"\\n    printf '%s\\n' \"\"\\n}\\n\\n# Logging function\\nlog_entry() {\\n    local key=\"$1\"\\n    local value=\"$2\"\\n    local level=\"${PROJECT_LOG_LEVEL}\"\\n    # shellcheck disable=SC2034 # this is intentionals\\n    SCRIPT_CMD_LOG=$(echo \"$(date '+[%Y-%m-%d %H:%M:%S,000]') [${CLASS_NAME}] [${level}] ${key}: ${value}\" | tee -a \"${LOG_FILE}\")\\n\\n}\\n\\nlog_with_timestamp() {\\n    local level=\"$1\"\\n    local message=\"$2\"\\n    local header=\"${API_ACTION:-UNKNOWN_ACTION}\"\\n    # shellcheck disable=SC2034 # this is intentionals\\n    SCRIPT_CMD_LOG=$(echo \"${message}\" | while IFS= read -r line; do\\n        echo \"$(date '+[%Y-%m-%d %H:%M:%S,000]') [${CLASS_NAME}] [${level}] [${header}] ${line}\"\\n    done | tee -a \"${LOG_FILE}\")\\n}\\n\\n# Get current script folder\\n# shellcheck disable=SC2046 # this is intentional\\nDIR_NAME=$(cd $(dirname \"${BASH_SOURCE[0]}\") && pwd)\\nDIR_PARENT_NAME=$(dirname \"$(dirname \"$(readlink -f \"${BASH_SOURCE[0]}\")\")\")\\n\\n# compute working and config dir\\n# check if write permission\\nif [ -w \"${DIR_PARENT_NAME}\" ]; then\\n    WORKING_DIR=\"${DIR_PARENT_NAME}/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nelse\\n    WORKING_DIR=\"/tmp/zzm/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nfi\\n\\n# create working directory\\nif [ ! -d \"${WORKING_DIR}\" ]; then\\n    mkdir -p \"${WORKING_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${WORKING_DIR}\" -R\\n    chmod g+wrx \"${WORKING_DIR}\" -R\\nfi\\n\\n# shellcheck disable=SC2034 # this is intentional\\nSCRIPT_DATA_FILE=\"${CONFIG_DIR}/data.json\"\\n\\n# Reset Colors\\n# shellcheck disable=SC2034 # this is intentional\\nColor_Off='\\033[0m' # Text Reset\\n\\n# Regular Colors\\n# shellcheck disable=SC2034 # this is intentional\\nBLUE=\"\\033[0;34m\"\\n# shellcheck disable=SC2034 # this is intentional\\nLIGHT_BLUE=\"\\033[0;94m\"\\n# shellcheck disable=SC2034 # this is intentional\\nCYAN=\"\\033[0;36m\"\\n# shellcheck disable=SC2034 # this is intentional\\nLIGHT_CYAN=\"\\033[0;96m\"\\n# shellcheck disable=SC2034 # this is intentional\\nYELLOW=\"\\033[0;33m\"\\n# shellcheck disable=SC2034 # this is intentional\\nORANGE=\"\\033[0;91m\"\\n# shellcheck disable=SC2034 # this is intentional\\nRESET=\"\\033[0m\"\\n# shellcheck disable=SC2034 # this is intentional\\nDARK_GREY=\"\\033[1;30m\"\\n\\n# shellcheck disable=SC2034 # this is intentional\\nBlack='\\033[0;30m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nRed='\\033[0;31m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nGreen='\\033[0;32m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nYellow='\\033[0;33m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nBlue='\\033[0;34m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nPurple='\\033[0;35m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nCyan='\\033[0;36m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nWhite='\\033[0;37m' # White\\n\\n# Bold\\n# shellcheck disable=SC2034 # this is intentional\\nBBlack='\\033[1;30m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nBRed='\\033[1;31m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nBGreen='\\033[1;32m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nBYellow='\\033[1;33m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nBBlue='\\033[1;34m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nBPurple='\\033[1;35m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nBCyan='\\033[1;36m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nBWhite='\\033[1;37m' # White\\n\\n# High Intensity\\n# shellcheck disable=SC2034 # this is intentional\\nIBlack='\\033[0;90m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nIRed='\\033[0;91m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nIGreen='\\033[0;92m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nIYellow='\\033[0;93m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nIBlue='\\033[0;94m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nIPurple='\\033[0;95m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nICyan='\\033[0;96m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nIWhite='\\033[0;97m' # White\\n\\n# Script defaults\\n# shellcheck disable=SC2034 # this is intentional\\nretcode=0\\n# shellcheck disable=SC2034 # this is intentional\\nSETUP_DIR=\"${DIR_NAME_PARENT}\"\\n# shellcheck disable=SC2034 # this is intentional\\nSUDO_STATE=\"false\"\\n# shellcheck disable=SC2116 disable=SC2034 # this is intentional\\nSCRIPT_SHELL=$(echo \"${SHELL}\")\\n\\n# hostname is assumed to be a FQDN set during installation.\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_FQDN=$(hostname -f)\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $1}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nDOMAIN_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $2\".\"$3}')\\n\\n# CTM Agent specific variables\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_CONTROLM_PROCLOG=$(env | grep \"CONTROLM_PROCLOG\" | awk -F \"=\" '{print $2}')\\n\\n# logging configuration\\n# requires script variables\\nDATE_TODAY=\"$(date '+%Y-%m-%d %H:%M:%S')\"\\n# shellcheck disable=SC2116 disable=SC2034 # this is intentional\\nLOG_DATE=$(date +%Y%m%d)\\nPROJECT_LOG_LEVEL=\"INFO\"\\n\\n# Compute log folder\\nif [ -z \"${ZZM_CONTROLM_PROCLOG}\" ]; then\\n    LOG_DIR=\"${WORKING_DIR}/zzm\"\\nelse\\n    LOG_DIR=\"${ZZM_CONTROLM_PROCLOG}/zzm\"\\nfi\\n\\nif [ ! -d \"${LOG_DIR}\" ]; then\\n    mkdir -p \"${LOG_DIR}\"\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nLOG_NAME=$(basename $0)\\n\\n# AWS Project log\\nLOG_NAME=\"gpg\"\\n\\nLOG_FILE=\"${LOG_DIR}/${LOG_NAME}.log\"\\nif [[ ! -f \"${LOG_FILE}\" ]]; then\\n    log_entry \"Init Log File\" \"'${LOG_FILE}'\"\\nfi\\n\\n# Linux Distribution\\nOS_NAME=$(uname -s)\\n\\nif [[ \"$OS_NAME\" == \"Darwin\" ]]; then\\n    # macOS\\n    DISTRIBUTION=\"macOS\"\\n    DISTRIBUTION_PRETTY_NAME=$(sw_vers -productName) # This will return \"Mac OS X\" for older versions or \"macOS\" for newer versions\\n    USER_NAME=$(whoami)\\n    HOST_IPV4=$(ifconfig | grep -v \"127.0.0\" | grep \"inet \" | awk '{print $2}' | head -n 1)\\n\\nelse\\n    # Assuming Linux for other cases\\n    # shellcheck disable=SC2116 disable=SC2034 # this is intentional\\n    DISTRIBUTION=$(cat /etc/*-release | uniq -u | grep \"^NAME\" | awk -F \"=\" '{ gsub(\"\\\"\", \"\",$2); print $2}')\\n    DISTRIBUTION_PRETTY_NAME=$(cat /etc/*-release | uniq -u | grep \"^PRETTY_NAME\" | awk -F \"=\" '{ gsub(\"\\\"\", \"\",$2); print $2}')\\n    # shellcheck disable=SC2116 # this is intentionals\\n    USER_NAME=$(whoami)\\n    # shellcheck disable=SC2034 # this is intentionals\\n    USER_HOME=$(getent passwd \"${USER_NAME}\" | cut -d: -f6)\\n    USER_GROUP=$(id -gn \"${USER_NAME}\")\\n    USER_GROUPS=$(groups \"${USER_NAME}\")\\n    HOST_IPV4=$(ip address | grep -v \"127.0.0\" | grep \"inet \" | awk '{print $2}' | awk -F \"/\" '{print $1}' | head -n 1)\\nfi\\n\\n# CTM default OS group name\\nCTM_ADMIN_GROUP=\"controlm\"\\n\\n# check if CTM admin group exists and user is a member of\\nif echo \"${USER_GROUPS}\" | grep -q \"\\b${CTM_ADMIN_GROUP}\\b\"; then\\n    CTM_GROUP=\"${CTM_ADMIN_GROUP}\"\\nelse\\n    # shellcheck disable=SC2034 # this is intentionals\\n    CTM_GROUP=\"${USER_GROUP}\"\\nfi\\n\\n# JAVA version\\nJAVA_HOME=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home'\" | awk -F \"= \" '{print $2}')\\nJAVA_VERSION=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.runtime.version'\" | awk -F \"= \" '{print $2}')\\nJAVA_RUNTIME=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.runtime.name'\" | awk -F \"= \" '{print $2}')\\n\\n# Sleep Time for AWS API calls\\n# shellcheck disable=SC2116 disable=SC2034 # this is intentional\\nSLEEP_TIME=\"15\"\\n\\nfunction display_info() {\\n\\n    # Calculate the length of the variable and the number of '-' characters\\n    LENGTH=${#JAVA_HOME}\\n    TOTAL_LENGTH=$((LENGTH + 24)) # 24 is the length of \" - Source File   : \" string\\n    # shellcheck disable=SC2183 # this is intentional\\n    SEPARATOR=$(printf '%*s' \"$TOTAL_LENGTH\" | tr ' ' '-')\\n\\n    printf \"\\n\"\\n    printf \" - %s - \\n\" \"${SCRIPT_PURPOSE}\"\\n    printf \" -----------------------------------------------\\n\"\\n    printf \" Date           : %s\\n\" \"${DATE_TODAY}\"\\n    printf \" Distribution   : %s\\n\" \"${DISTRIBUTION_PRETTY_NAME}\"\\n    printf \" User Name      : %s\\n\" \"${USER}\"\\n    printf \" User Group     : %s\\n\" \"${CTM_GROUP}\"\\n\\n    printf \" Sudo Mode      : %s\\n\" \"${SUDO_STATE}\"\\n    printf \" Domain Name    : %s\\n\" \"${DOMAIN_NAME}\"\\n    printf \" Host FDQN      : %s\\n\" \"${HOST_FQDN}\"\\n    printf \" Host Name      : %s\\n\" \"${HOST_NAME}\"\\n    printf \" Host IPv4      : %s\\n\" \"${HOST_IPV4}\"\\n    printf \" Agent Folder   : %s\\n\" \"${DIR_NAME_PARENT}\"\\n    printf \" Script Folder  : %s\\n\" \"${DIR_NAME}\"\\n    printf \" Working Folder : %s\\n\" \"${WORKING_DIR}\"\\n    printf \" Config Folder  : %s\\n\" \"${CONFIG_DIR}\"\\n    printf \" Log Folder     : %s\\n\" \"${LOG_DIR}\"\\n    printf \" ---------------------\\n\"\\n    printf \" Data File      : %s\\n\" \"${SCRIPT_DATA_FILE}\"\\n    printf \" Data Folder    : %s\\n\" \"${CONFIG_DIR}\"\\n    printf \" JAVA Version   : %s\\n\" \"${JAVA_VERSION}\"\\n    printf \" JAVA RunTime   : %s\\n\" \"${JAVA_RUNTIME}\"\\n    printf \" JAVA Home      : %s\\n\" \"${JAVA_HOME}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n\\n    log_entry \"Script Purpose\" \"${SCRIPT_PURPOSE}\"\\n    log_entry \"Date\" \"${DATE_TODAY}\"\\n    log_entry \"Distribution\" \"${DISTRIBUTION_PRETTY_NAME}\"\\n    log_entry \"User Name\" \"${USER}\"\\n    log_entry \"User Group\" \"${CTM_GROUP}\"\\n    log_entry \"Sudo Mode\" \"${SUDO_STATE}\"\\n    log_entry \"Domain Name\" \"${DOMAIN_NAME}\"\\n    log_entry \"Host FDQN\" \"${HOST_FQDN}\"\\n    log_entry \"Host Name\" \"${HOST_NAME}\"\\n    log_entry \"Host IPv4\" \"${HOST_IPV4}\"\\n    log_entry \"Agent Folder\" \"'${DIR_NAME_PARENT}'\"\\n    log_entry \"Script Folder\" \"'${DIR_NAME}'\"\\n    log_entry \"Working Folder\" \"'${WORKING_DIR}'\"\\n    log_entry \"Config Folder\" \"'${CONFIG_DIR}'\"\\n    log_entry \"Log Folder\" \"'${LOG_DIR}'\"\\n    log_entry \"Data File\" \"'${SCRIPT_DATA_FILE}'\"\\n    log_entry \"Data Folder\" \"'${CONFIG_DIR}'\"\\n    log_entry \"JAVA Version\" \"${JAVA_VERSION}\"\\n    log_entry \"JAVA RunTime\" \"${JAVA_RUNTIME}\"\\n    log_entry \"JAVA Home\" \"'${JAVA_HOME}'\"\\n}\\n\\n# Show license, logo and info\\nlicense\\nctmLogo\\ndisplay_info\\n\\n# Extract the script parameters / shell variables\\n# CTM OS Job variables\\n\\n# VAR_ZZM_GPG_KEY_IMPORT_SOURCE_PATH -> %%ZZM_GPG_KEY_IMPORT_SOURCE_PATH\\n# VAR_ZZM_GPG_KEY_IMPORT_FILE_INFO -> %%ZZM_GPG_INFO_FILE\\n# --file %%ZZM_GPG_INFO_FILE\\n# --directory '/opt/ctmag/ctm/cm/AFT/ftshome/b2bhome/%%ZZM_USER_ID/onboarding'\\n\\n# VAR_ZZM_COMPANY -> %%ZZM_COMPANY\\n# VAR_ZZM_USER_ID -> %%ZZM_USER_ID\\n# VAR_ZZM_USER_EMAIL-> %%ZZM_USER_EMAIL\\n# VAR_ZZM_ZZM_CTM_ENVIRONMENT -> %%ZZM_ZZM_CTM_ENVIRONMENT\\n\\n# VAR_ZZM_AWS_S3_BUCKET -> %%ZZM_AWS_S3_BUCKET\\n# VAR_ZZM_AZURE_CONTAINER -> %%ZZM_AZURE_CONTAINER\\n# VAR_ZZM_GCS_BUCKET -> %%ZZM_GCS_BUCKET\\n# VAR_ZZM_OCI_BUCKET -> %%ZZM_OCI_BUCKET\\n# VAR_ZZM_FILE_NAME -> %%ZZM_FILE_NAME\\n# VAR_ZZM_VIRTUAL_FOLDER -> %%ZZM_VIRTUAL_FOLDER\\n# VAR_ZZM_SUB_DIR_PATH -> %%ZZM_SUB_DIR_PATH\\n# VAR_ZZM_FILE_ABS_PATH -> %%ZZM_FILE_ABS_PATH\\n# VAR_ZZM_FILE_PATH -> %%ZZM_FILE_PATH\\n# VAR_ZZM_FILE_DIR -> %%ZZM_FILE_DIR\\n# VAR_ZZM_FILE_ABS_DIR -> %%ZZM_FILE_ABS_DIR\\n# VAR_ZZM_FILE_EXT_NO_DOT -> %%ZZM_FILE_EXT_NO_DOT\\n\\n# VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER -> %%ZZM_ZZM_B2B_VIRTUAL_FOLDER\\n# VAR_ZZM_B2B_GROUP -> %%ZZM_B2B_GROUP\\n# VAR_ZZM_ZZM_B2B_SITE -> %%ZZM_ZZM_B2B_SITE\\n# VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER -> %%ZZM_B2B_SHARED_VIRTUAL_FOLDER\\n\\n# initialize b2b variables\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nGPG_KEY_IMPORT_SOURCE_PATH=$(env | grep \"VAR_ZZM_GPG_KEY_IMPORT_SOURCE_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nGPG_KEY_IMPORT_FILE_INFO=$(env | grep \"VAR_ZZM_GPG_KEY_IMPORT_FILE_INFO\" | awk -F \"=\" '{print $2}')\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_COMPANY=$(env | grep \"VAR_ZZM_COMPANY\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_USER_ID=$(env | grep \"VAR_ZZM_USER_ID\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_USER_EMAIL=$(env | grep \"VAR_ZZM_USER_EMAIL\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_CTM_ENVIRONMENT=$(env | grep \"VAR_ZZM_CTM_ENVIRONMENT\" | awk -F \"=\" '{print $2}')\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AWS_S3_BUCKET=$(env | grep \"VAR_ZZM_AWS_S3_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AZURE_CONTAINER=$(env | grep \"VAR_ZZM_AZURE_CONTAINER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_GCS_BUCKET=$(env | grep \"VAR_ZZM_GCS_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_OCI_BUCKET=$(env | grep \"VAR_ZZM_OCI_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_NAME=$(env | grep \"VAR_ZZM_FILE_NAME\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_SUB_DIR_PATH=$(env | grep \"VAR_ZZM_SUB_DIR_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_PATH=$(env | grep \"VAR_ZZM_FILE_ABS_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_PATH=$(env | grep \"VAR_ZZM_FILE_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_DIR=$(env | grep \"VAR_ZZM_FILE_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_DIR=$(env | grep \"VAR_ZZM_FILE_ABS_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_EXT_NO_DOT=$(env | grep \"VAR_ZZM_FILE_EXT_NO_DOT\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_ZZM_B2B_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_GROUP=$(env | grep \"VAR_ZZM_B2B_GROUP\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SITE=$(env | grep \"VAR_ZZM_B2B_SITE\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SHARED_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n\\nfunction display_project_details() {\\n    # Calculate the length of the variable and the number of '-' characters\\n    LENGTH=${#GPG_KEY_FINGERPRINTS_PUBLIC_CSV}\\n    TOTAL_LENGTH=$((LENGTH + 28)) # 24 is the length of \" - Source File   : \" string\\n    # shellcheck disable=SC2183 # this is intentional\\n    SEPARATOR=$(printf '%*s' \"$TOTAL_LENGTH\" | tr ' ' '-')\\n\\n    printf \"\\n\"\\n    # shellcheck disable=SC2059 # this is intentional\\n    printf \" ---- Project Details ----\\n\"\\n    printf \" - GPG Binary           : %s\\n\" \"${GPG_BIN}\"\\n    printf \" - GPG Key Name         : %s\\n\" \"${GPG_KEY_NAME}\"\\n    printf \" - GPG Key Passphrase   : %s\\n\" \"${GPG_KEY_PASSPHRASE}\"\\n    printf \" - GPG Key List         : %s\\n\" \"${GPG_KEY_LIST_CSV}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Data Folder      : %s\\n\" \"${GPG_KEY_WORKING_FOLDER}\"\\n    printf \" - GPG Key Pub Path     : %s\\n\" \"${GPG_KEY_IMPORT_PATH_PUBLIC}\"\\n    printf \" - GPG Key Priv Path    : %s\\n\" \"${GPG_KEY_IMPORT_PATH_PRIVATE}\"\\n    printf \" - GPG Key Pub File     : %s\\n\" \"${GPG_KEY_IMPORT_FILE_PUBLIC}\"\\n    printf \" - GPG Key Priv File    : %s\\n\" \"${GPG_KEY_IMPORT_FILE_PRIVATE}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Key Info File    : %s\\n\" \"${GPG_KEY_IMPORT_FILE_INFO}\"\\n    printf \" - GPG Pub Key File     : %s\\n\" \"${GPG_KEY_IMPORT_FILE_PUBLIC}\"\\n    printf \" - GPG Fingerprints     : %s\\n\" \"${GPG_KEY_FINGERPRINTS_PUBLIC_CSV}\"\\n    printf \" - GPG Pub Key Name     : %s\\n\" \"${GPG_KEY_NAME_PUBLIC}\"\\n    printf \" - GPG Pub Key List     : %s\\n\" \"${GPG_KEY_LIST_CSV}\"\\n    printf \" - GPG Pub Key Status   : %s\\n\" \"${GPG_KEY_STATUS_PUBLIC}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Key Info File    : %s\\n\" \"${GPG_KEY_IMPORT_FILE_INFO}\"\\n    printf \" - GPG Pri Key File     : %s\\n\" \"${GPG_KEY_IMPORT_FILE_PRIVATE}\"\\n    printf \" - GPG Fingerprints     : %s\\n\" \"${GPG_KEY_FINGERPRINTS_PRIVATE_CSV}\"\\n    printf \" - GPG Pri Key Name     : %s\\n\" \"${GPG_KEY_NAME_PRIVATE}\"\\n    printf \" - GPG Pri Key List     : %s\\n\" \"${GPG_KEY_LIST_CSV}\"\\n    printf \" - GPG Key ID in File   : %s\\n\" \"${GPG_KEY_ID_PRIVATE_FROM_FILE}\"\\n    printf \" - GPG Key ID           : %s\\n\" \"${GPG_KEY_ID_PRIVATE}\"\\n    printf \" - GPG Processed Total  : %s\\n\" \"${GPG_PRIVATE_KEY_TOTAL_PROCESSED}\"\\n    printf \" - GPG Unchanged        : %s\\n\" \"${GPG_PRIVATE_KEY_UNCHANGED}\"\\n    printf \" - GPG Secret Read      : %s\\n\" \"${GPG_PRIVATE_KEY_SECRET_READ}\"\\n    printf \" - GPG Secret Unchanged : %s\\n\" \"${GPG_PRIVATE_KEY_SECRET_UNCHANGED}\"\\n    printf \" - GPG Secret Imported  : %s\\n\" \"${GPG_PRIVATE_KEY_SECRET_IMPORTED}\"\\n    printf \" - GPG Priv Status      : %s\\n\" \"${GPG_KEY_STATUS_PRIVATE}\"\\n    printf \" - GPG Trust Status     : %s\\n\" \"${GPG_KEY_TRUST_STATUS}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Known List       : %s\\n\" \"${GPG_KEY_LIST_FINAL_CSV}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Update Data      : %s\\n\" \"${GPG_UPDATE_DATA}\"\\n    printf \" - GPG Source File      : %s\\n\" \"${GPG_KEY_IMPORT_SOURCE_PATH_INFO}\"\\n    printf \" - GPG Info Content     : %s\\n\" \"${GPG_KEY_IMPORT_INFO}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n\\n}\\n\\nfunction display_debug_details() {\\n    # Calculate the length of the variable and the number of '-' characters\\n    LENGTH=${#GPG_KEY_FINGERPRINTS_PUBLIC_CSV}\\n    TOTAL_LENGTH=$((LENGTH + 28)) # 24 is the length of \" - Source File   : \" string\\n    # shellcheck disable=SC2183 # this is intentional\\n    SEPARATOR=$(printf '%*s' \"$TOTAL_LENGTH\" | tr ' ' '-')\\n\\n    printf \"\\n\"\\n    # shellcheck disable=SC2059 # this is intentional\\n    printf \" ---- Debug Details ----\\n\"\\n    printf \" - Mode                 : %s\\n\" \"${PROJECT_MODE}\"\\n    printf \" - Debug Status         : %s\\n\" \"${PROJECT_DEBUG}\"\\n    printf \" - Name                 : %s\\n\" \"${PROJECT_NAME}\"\\n    printf \" - Code                 : %s\\n\" \"${PROJECT_CODE}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Binary           : %s\\n\" \"${GPG_BIN}\"\\n    printf \" - GPG Key Name         : %s\\n\" \"${GPG_KEY_NAME}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Source Folder    : %s\\n\" \"${GPG_KEY_IMPORT_SOURCE_PATH}\"\\n    printf \" - GPG Working Folder   : %s\\n\" \"${GPG_KEY_WORKING_FOLDER}\"\\n    printf \" - GPG Key Info File    : %s\\n\" \"${GPG_KEY_IMPORT_FILE_INFO}\"\\n    printf \" - GPG Source File      : %s\\n\" \"${GPG_KEY_IMPORT_SOURCE_PATH_INFO}\"\\n    printf \" - GPG Working File     : %s\\n\" \"${GPG_KEY_IMPORT_PATH_INFO}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n\\n}\\n\\n# -- End of boilerplate --\\n\\n# -- Start of project logic --\\nSCRIPT_PURPOSE=\"generate gpg keys and export public key\"\\nCLASS_NAME=\"gpg-generate\"\\nPROJECT_LOG_LEVEL=\"DEBUG\"\\n\\n# Assign GPG binary\\nGPG_BIN=$(which gpg)\\n\\n# Replace \" \" with \"_\"\\n# shellcheck disable=SC2006 disable=SC2001 # this is intentional\\nGPG_KEY_NAME=$(echo \"${ZZM_USER_ID}\" | sed 's/ /_/g')\\nGPG_KEY_NAME_LCASE=$(echo \"${ZZM_USER_ID}\" | tr '[:upper:]' '[:lower:]')\\n\\n# Assign default working folder\\nGPG_KEY_WORKING_FOLDER=\"${WORKING_DIR}/gpg/${GPG_KEY_NAME_LCASE}\"\\nif [ ! -d \"${GPG_KEY_WORKING_FOLDER}\" ]; then\\n    mkdir -p \"${GPG_KEY_WORKING_FOLDER}\"\\nfi\\n\\n# Assign default import file\\nif [ -z \"${GPG_KEY_IMPORT_FILE_INFO}\" ]; then\\n    GPG_KEY_IMPORT_FILE_INFO=\"dsse.gpg.info.json\"\\nfi\\n\\n# Copy GPG file to data directory\\nGPG_KEY_IMPORT_SOURCE_PATH_INFO=\"${GPG_KEY_IMPORT_SOURCE_PATH}/${GPG_KEY_IMPORT_FILE_INFO}\"\\nGPG_KEY_IMPORT_PATH_INFO=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_IMPORT_FILE_INFO}\"\\n\\nif [[ -d \"${GPG_KEY_IMPORT_SOURCE_PATH}\" ]]; then\\n    CMD_RESULT=$(sudo rsync -av --progress \"${GPG_KEY_IMPORT_SOURCE_PATH}/\" \"${GPG_KEY_WORKING_FOLDER}/\")\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CMD_RESULT}\"\\n    sudo chown \"${USER}\":\"${CTM_GROUP}\" \"${GPG_KEY_WORKING_FOLDER}\" -R\\n    sudo chmod g+wrx \"${GPG_KEY_WORKING_FOLDER}\" -R\\nfi\\n\\ndisplay_debug_details\\n\\n# Exit script if no import file\\nif [[ -f \"${GPG_KEY_IMPORT_PATH_INFO}\" ]]; then\\n    GPG_KEY_IMPORT_INFO=$(jq '.' \"${GPG_KEY_IMPORT_PATH_INFO}\")\\n    GPG_UPDATE_DATA=\"${GPG_KEY_IMPORT_INFO}\"\\nelse\\n    exit 1\\nfi\\n\\nAPI_ACTION=\"Extract GPG details from the GPG info file\"\\necho \" \"\\necho -e \"  # Stage       -> ${API_ACTION}\"\\nlog_with_timestamp \"INFO\" \"Start\"\\n\\n# Extract GPG details from the GPG info file\\nGPG_KEY_NAME=$(echo \"${GPG_KEY_IMPORT_INFO}\" | jq -r '.name')\\nGPG_KEY_PASSPHRASE=$(echo \"${GPG_KEY_IMPORT_INFO}\" | jq -r '.passphrase')\\nGPG_KEY_IMPORT_FILE_PUBLIC=$(echo \"${GPG_KEY_IMPORT_INFO}\" | jq -r '.public')\\nGPG_KEY_IMPORT_FILE_PRIVATE=$(echo \"${GPG_KEY_IMPORT_INFO}\" | jq -r '.private')\\n\\nGPG_KEY_IMPORT_PATH_PUBLIC=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_IMPORT_FILE_PUBLIC}\"\\nGPG_KEY_IMPORT_PATH_PRIVATE=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_IMPORT_FILE_PRIVATE}\"\\n\\n# start gpg deamon if not running\\nGPG_DAEMON_STATUS=$(gpgconf --list-dirs agent-socket)\\nif [[ -z ${GPG_DAEMON_STATUS} ]]; then\\n    # shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\n    GPG_DAEMON=$(gpg-agent --daemon)\\n    GPG_DAEMON_STATUS=$(gpgconf --list-dirs agent-socket)\\nfi\\n\\nprintf \"\\n\"\\nprintf \" - GPG Data Folder    : %s\\n\" \"${GPG_KEY_WORKING_FOLDER}\"\\nprintf \" - GPG Info File      : %s\\n\" \"${GPG_KEY_IMPORT_FILE_INFO}\"\\nprintf \" - GPG Daemon Status  : %s\\n\" \"${GPG_DAEMON_STATUS}\"\\nprintf \" -----------------------------------------------\\n\"\\nprintf \" - GPG Key Name       : %s\\n\" \"${GPG_KEY_NAME}\"\\nprintf \" - GPG Key Passphrase : %s\\n\" \"${GPG_KEY_PASSPHRASE}\"\\n\\nprintf \" -----------------------------------------------\\n\"\\nprintf \" - GPG Pri Key File   : %s\\n\" \"${GPG_KEY_IMPORT_FILE_PRIVATE}\"\\nprintf \" - GPG Pub Key File   : %s\\n\" \"${GPG_KEY_IMPORT_FILE_PUBLIC}\"\\nprintf \"\\n\"\\n\\n# # Process GPG requests\\n\\nAPI_ACTION=\"Process GPG requests for public key\"\\necho \" \"\\necho -e \"  # Stage       -> ${API_ACTION}\"\\nlog_with_timestamp \"INFO\" \"Start\"\\n\\nif [[ -f \"${GPG_KEY_IMPORT_PATH_PUBLIC}\" ]]; then\\n\\n    API_ACTION=\"gpg --with-colons --import-options show-only --import --fingerprint\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --with-colons --import-options show-only --import --fingerprint \"${GPG_KEY_IMPORT_PATH_PUBLIC}\" 2>&1 | grep '^fpr' | cut -d':' -f10 | tr '\\n' ',' | sed 's/,$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_FINGERPRINTS_PUBLIC=\"${API_RESULT}\"\\n\\n    API_ACTION=\"gpg --with-colons --import-options show-only --import --fingerprint\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --with-colons --import-options show-only --import --fingerprint \"${GPG_KEY_IMPORT_PATH_PUBLIC}\" 2>&1)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_INFO=\"${API_RESULT}\"\\n\\n    API_ACTION=\"awk\"\\n    API_RESULT=$(echo \"${GPG_KEY_INFO}\" | awk -F: '/^uid/{split($10,a,\"<|>\"); print a[1]}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_NAME_PUBLIC_TEMP=\"${API_RESULT}\"\\n\\n    API_ACTION=\"gpg --batch --list-keys --with-colons\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --batch --list-keys --with-colons 2>/dev/null | awk -F: '/^uid/{split($10,a,\"<|>\"); print a[1]}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_LIST=\"${API_RESULT}\"\\n\\n    API_ACTION=\"sed\"\\n    API_RESULT=$(echo \"${GPG_KEY_LIST}\" | tr '\\n' ',' | sed 's/,$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_LIST_CSV=\"${API_RESULT}\"\\n\\n    API_ACTION=\"sed\"\\n    API_RESULT=$(echo \"${GPG_KEY_NAME_PUBLIC_TEMP}\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_NAME_PUBLIC=\"${API_RESULT}\"\\n\\n    API_ACTION=\"Remove any public key\"\\n    echo \" \"\\n    echo -e \"  # Stage       -> ${API_ACTION}\"\\n    log_with_timestamp \"INFO\" \"Start\"\\n\\n    # remove any existing keys\\n    for GPG_KEY in ${GPG_KEY_LIST}; do\\n\\n        if [[ \"${GPG_KEY}\" == *\"${GPG_KEY_NAME_PUBLIC}\"* ]]; then\\n\\n            API_ACTION=\"gpg key:*\"\\n            echo -e \"  > API Action   : ${API_ACTION}\"\\n            API_RESULT=${GPG_KEY%%:*}\\n            log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n            GPG_FINGERPRINT=\"${API_RESULT}\"\\n\\n            API_ACTION=\"gpg --batch --list-secret-keys --with-colons\"\\n            echo -e \"  > API Action   : ${API_ACTION}\"\\n            API_RESULT=$(gpg --batch --list-secret-keys --with-colons \"${GPG_FINGERPRINT}\" 2>/dev/null)\\n            log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n            GPG_SECRET_KEYS=\"${API_RESULT}\"\\n\\n            # shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\n            if [[ -n \"${GPG_SECRET_KEYS}\" ]]; then\\n                # shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\n\\n                API_ACTION=\"gpg --list-keys --with-fingerprint --with-colons\"\\n                echo -e \"  > API Action   : ${API_ACTION}\"\\n                API_RESULT=$(gpg --list-keys --with-fingerprint --with-colons ${GPG_KEY_NAME} 2>/dev/null | grep '^fpr' | cut -d':' -f10)\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n                GPG_KEY_FINGERPRINTS_PUBLIC=\"${API_RESULT}\"\\n\\n                API_ACTION=\"sed\"\\n                API_RESULT=$(echo \"${GPG_KEY_FINGERPRINTS_PUBLIC}\" | tr '\\n' ',' | sed 's/,$//')\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n                GPG_KEY_FINGERPRINTS_PUBLIC_CSV=\"${API_RESULT}\"\\n\\n                # Loop through all the fingerprints and delete the corresponding key(s)\\n                # shellcheck disable=SC1072 disable=SC1073 # this is intentionals\\n                for GPG_KEY_FINGERPRINT in ${GPG_KEY_FINGERPRINTS_PUBLIC}; do\\n\\n                    API_ACTION=\"gpg --batch --yes --delete-secret-keys\"\\n                    echo -e \"  > API Action   : ${API_ACTION}\"\\n                    API_RESULT=$(gpg --batch --yes --delete-secret-keys ${GPG_KEY_FINGERPRINT} 2>/dev/null)\\n                    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n                    GPG_KEY_RESULT=\"${API_RESULT}\"\\n\\n                    API_ACTION=\"gpg --batch --yes --delete-key\"\\n                    echo -e \"  > API Action   : ${API_ACTION}\"\\n                    API_RESULT=$(gpg --batch --yes --delete-key ${GPG_KEY_FINGERPRINT} 2>/dev/null)\\n                    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n                    GPG_KEY_RESULT=\"${API_RESULT}\"\\n                done\\n            else\\n                API_ACTION=\"gpg --batch --yes --delete-keys\"\\n                echo -e \"  > API Action   : ${API_ACTION}\"\\n                API_RESULT=$(gpg --batch --yes --delete-keys ${GPG_FINGERPRINT} 2>/dev/null)\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n                GPG_KEY_RESULT=\"${API_RESULT}\"\\n            fi\\n        fi\\n    done\\n\\n    # add only public key\\n    API_ACTION=\"Add public key\"\\n    echo \" \"\\n    echo -e \"  # Stage       -> ${API_ACTION}\"\\n    log_with_timestamp \"INFO\" \"Start\"\\n\\n    API_ACTION=\"gpg --batch --yes --import\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --batch --yes --import \"${GPG_KEY_IMPORT_PATH_PUBLIC}\" 2>&1)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n\\n    API_ACTION=\"gpg --batch --list-keys --with-colons\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --batch --list-keys --with-colons \"${GPG_KEY_NAME_PUBLIC}\" 2>&1 | grep '^fpr' | cut -d':' -f10 | tr '\\n' ',' | sed 's/,$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_LIST=\"${API_RESULT}\"\\n\\n    API_ACTION=\"gpg --batch --list-keys --with-colons\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --batch --list-keys --with-colons \"${GPG_KEY_NAME_PUBLIC}\" 2>&1 | grep '^fpr' | cut -d':' -f10 | tr '\\n' ',' | sed 's/,$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_LIST=\"${API_RESULT}\"\\n\\n    # trust key\\n    API_ACTION=\"gpg --list-keys --with-fingerprint --with-colons\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    # shellcheck disable=SC2086 # this is intentionals\\n    API_RESULT=$(gpg --list-keys --with-fingerprint --with-colons ${GPG_KEY_NAME} 2>/dev/null | grep '^fpr' | cut -d':' -f10)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_FINGERPRINTS_PUBLIC=\"${API_RESULT}\"\\n\\n    API_ACTION=\"sed\"\\n    API_RESULT=$(echo \"${GPG_KEY_FINGERPRINTS_PUBLIC}\" | tr '\\n' ',' | sed 's/,$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_FINGERPRINTS_PUBLIC_CSV=\"${API_RESULT}\"\\n\\n    for GPG_KEY_FINGERPRINT in ${GPG_KEY_FINGERPRINTS_PUBLIC}; do\\n        GPG_KEY_FINGERPRINT_TEMP=\"${GPG_KEY_FINGERPRINT}:6:\"\\n\\n        API_ACTION=\"gpg --batch --yes --import-ownertrust\"\\n        echo -e \"  > API Action   : ${API_ACTION}\"\\n        API_RESULT=$(echo \"${GPG_KEY_FINGERPRINT_TEMP}\" | gpg --batch --yes --import-ownertrust 2>&1)\\n        log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n        # shellcheck disable=SC2034 # this is intentionals\\n        GPG_CMD_RESULT=\"${API_RESULT}\"\\n    done\\n\\n    # get key id\\n    API_ACTION=\"gpg --list-keys --with-fingerprint --with-colons\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    # shellcheck disable=SC2086 # this is intentionals\\n    API_RESULT=$(gpg --list-keys --with-fingerprint --with-colons ${GPG_KEY_NAME} 2>/dev/null | awk -F: '/^pub:/ {print $5}' 2>&1)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n\\n    API_ACTION=\"grep, awk\"\\n    API_RESULT=$(echo \"${API_RESULT}\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_ID_PUBLIC=\"${API_RESULT}\"\\n\\n    UPDATED_DATA=$(echo \"${GPG_UPDATE_DATA}\" | jq --arg keyid \"${GPG_KEY_ID_PUBLIC}\" '.keyid += {\"public\": $keyid}')\\n\\n    # Write the updated data to the specified variable\\n    GPG_UPDATE_DATA=\"${UPDATED_DATA}\"\\n\\n    if echo \"${GPG_KEY_LIST}\" | grep -Eq '^[^,]+,[^,]+$'; then\\n        GPG_KEY_STATUS_PUBLIC=\"TRUE\"\\n    else\\n        GPG_KEY_STATUS_PUBLIC=\"FALSE\"\\n    fi\\nfi\\n\\nAPI_ACTION=\"Process GPG requests for private key\"\\necho \" \"\\necho -e \"  # Stage       -> ${API_ACTION}\"\\nlog_with_timestamp \"INFO\" \"Start\"\\n\\n# shellcheck disable=SC1073 # this is intentionals\\nif [[ -f \"${GPG_KEY_IMPORT_PATH_PRIVATE}\" ]]; then\\n\\n    API_ACTION=\"gpg --with-colons --import-options show-only --import --fingerprint\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --with-colons --import-options show-only --import --fingerprint \"${GPG_KEY_IMPORT_PATH_PRIVATE}\")\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_INFO=\"${API_RESULT}\"\\n\\n    API_ACTION=\"awk\"\\n    API_RESULT=$(echo \"${GPG_KEY_INFO}\" | awk -F: '/^uid/{split($10,a,\"<|>\"); print a[1]}' | awk '{print $NF}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_NAME_PRIVATE=\"${API_RESULT}\"\\n\\n    API_ACTION=\"gpg --batch --yes --passphrase --import\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    GPG_CMD=\"gpg --batch --yes --passphrase ${GPG_KEY_PASSPHRASE} --import ${GPG_KEY_IMPORT_PATH_PRIVATE}\"\\n    API_RESULT=$(${GPG_CMD} 2>&1)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_CMD_RESULT=\"${API_RESULT}\"\\n\\n    API_ACTION=\"grep\"\\n    API_RESULT=$(echo \"${GPG_CMD_RESULT}\" | grep \"Total number processed\" | awk '{print $NF}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_PRIVATE_KEY_TOTAL_PROCESSED=\"${API_RESULT}\"\\n\\n    API_ACTION=\"grep\"\\n    API_RESULT=$(echo \"${GPG_CMD_RESULT}\" | grep \"  unchanged\" | awk '{print $NF}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_PRIVATE_KEY_UNCHANGED=\"${API_RESULT}\"\\n\\n    API_ACTION=\"grep\"\\n    API_RESULT=$(echo \"${GPG_CMD_RESULT}\" | grep \"secret keys read\" | awk '{print $NF}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_PRIVATE_KEY_SECRET_READ=\"${API_RESULT}\"\\n\\n    API_ACTION=\"grep\"\\n    API_RESULT=$(echo \"${GPG_CMD_RESULT}\" | grep \"secret keys imported\" | awk '{print $NF}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_PRIVATE_KEY_SECRET_IMPORTED=\"${API_RESULT}\"\\n\\n    API_ACTION=\"grep\"\\n    API_RESULT=$(echo \"${GPG_CMD_RESULT}\" | grep \"secret keys unchanged\" | awk '{print $NF}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_PRIVATE_KEY_SECRET_UNCHANGED=\"${API_RESULT}\"\\n\\n    API_ACTION=\"awk\"\\n    API_RESULT=$(echo \"${GPG_KEY_INFO}\" | awk -F: '/^sec:/ { print $5 }')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_ID_PRIVATE_FROM_FILE=\"${API_RESULT}\"\\n\\n    API_ACTION=\"gpg --list-secret-keys --with-colons\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --list-secret-keys --with-colons \"${GPG_KEY_NAME_PRIVATE}\" 2>&1 | awk -F: '/^sec:/ { print $5 }')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_ID_PRIVATE=\"${API_RESULT}\"\\n\\n    UPDATED_DATA=$(echo \"${GPG_UPDATE_DATA}\" | jq --arg keyid \"${GPG_KEY_ID_PRIVATE}\" '.keyid += {\"private\": $keyid}')\\n\\n    # Write the updated data to the specified variable\\n    GPG_UPDATE_DATA=\"${UPDATED_DATA}\"\\n\\n    API_ACTION=\"gpg --list-secret-keys --with-fingerprint --with-colons\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    API_RESULT=$(gpg --list-secret-keys --with-fingerprint --with-colons \"${GPG_KEY_NAME_PRIVATE}\" | grep '^fpr' | cut -d':' -f10)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_FINGERPRINTS_PRIVATE=\"${API_RESULT}\"\\n\\n    API_ACTION=\"sed\"\\n    API_RESULT=$(echo \"${GPG_KEY_FINGERPRINTS_PRIVATE}\" | tr '\\n' ',' | sed 's/,$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_FINGERPRINTS_PRIVATE_CSV=\"${API_RESULT}\"\\n\\n    API_ACTION=\"Loop through all the fingerprints and trust the corresponding key(s)\"\\n    echo \" \"\\n    echo -e \"  # Stage       -> ${API_ACTION}\"\\n    log_with_timestamp \"INFO\" \"Start\"\\n\\n    for GPG_KEY_FINGERPRINT in ${GPG_KEY_FINGERPRINTS_PRIVATE}; do\\n        GPG_KEY_FINGERPRINT_TEMP=\"${GPG_KEY_FINGERPRINT}:6:\"\\n\\n        API_ACTION=\"gpg --batch --yes --import-ownertrust\"\\n        echo -e \"  > API Action   : ${API_ACTION}\"\\n        API_RESULT=$(echo \"${GPG_KEY_FINGERPRINT_TEMP}\" | gpg --batch --yes --import-ownertrust 2>&1)\\n        log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n        GPG_CMD_RESULT=\"${API_RESULT}\"\\n    done\\n\\n    API_ACTION=\"gpg --list-secret-keys\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    # API_RESULT=$(gpg --list-secret-keys ${GPG_KEY_NAME_PRIVATE} | grep -oP 'uid\\s+.*$' | sed 's/^uid\\s*//' | cut -d'<' -f1 | sed 's/\\s*$//')\\n    API_RESULT=$(gpg --list-secret-keys \"${GPG_KEY_NAME_PRIVATE}\" 2>&1 | grep -o 'uid.*' | sed 's/^uid\\s*//' | cut -d'<' -f1 | sed 's/\\s*$//')\\n    GPG_KEY_TRUST_RESULT=\"${API_RESULT}\"\\n\\n    # get key id\\n    API_ACTION=\"gpg --list-secret-keys --with-fingerprint --with-colons\"\\n    echo -e \"  > API Action   : ${API_ACTION}\"\\n    # shellcheck disable=SC2086 # this is intentionals\\n    API_RESULT=$(gpg --list-secret-keys --with-fingerprint --with-colons ${GPG_KEY_NAME_PRIVATE} 2>/dev/null | awk -F: '/^pub:/ {print $5}' 2>&1)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n\\n    UPDATED_DATA=$(echo \"${GPG_UPDATE_DATA}\" | jq --arg keyid \"${GPG_KEY_ID_PRIVATE}\" '.keyid += {\"private\": $keyid}')\\n\\n    # Write the updated data to the specified variable\\n    GPG_UPDATE_DATA=\"${UPDATED_DATA}\"\\n\\n    if [[ \"${GPG_KEY_TRUST_RESULT}\" == *\"ultimate\"* ]]; then\\n        GPG_KEY_TRUST_STATUS=\"TRUE\"\\n    else\\n        GPG_KEY_TRUST_STATUS=\"FALSE\"\\n    fi\\n\\n    if [[ \"${GPG_PRIVATE_KEY_TOTAL_PROCESSED}\" =~ ^[0-9]+$ ]] && [[ \"${GPG_PRIVATE_KEY_TOTAL_PROCESSED}\" -gt 0 ]]; then\\n        GPG_KEY_STATUS_PRIVATE=\"TRUE\"\\n    else\\n        GPG_KEY_STATUS_PRIVATE=\"FALSE\"\\n    fi\\nfi\\n\\nAPI_ACTION=\"Final Report\"\\necho \" \"\\necho -e \"  # Stage       -> ${API_ACTION}\"\\nlog_with_timestamp \"INFO\" \"Start\"\\n\\nAPI_ACTION=\"gpg --batch --list-keys --with-colons\"\\necho -e \"  > API Action   : ${API_ACTION}\"\\nAPI_RESULT=$(gpg --batch --list-keys --with-colons 2>/dev/null | awk -F: '/^uid/{split($10,a,\"<|>\"); print a[1]}')\\nlog_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\nGPG_KEY_LIST_FINAL=\"${API_RESULT}\"\\n\\nAPI_ACTION=\"sed\"\\nAPI_RESULT=$(echo \"${GPG_KEY_LIST_FINAL}\" | tr '\\n' ',' | sed 's/,$//')\\nlog_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\nGPG_KEY_LIST_FINAL_CSV=\"${API_RESULT}\"\\n\\n# shellcheck disable=SC2034 # this is intentionals\\nCMD_RESULT=$(echo \"${GPG_UPDATE_DATA}\" | tee \"${GPG_KEY_IMPORT_PATH_INFO}\")\\nlog_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CMD_RESULT}\"\\n\\n# Synch Source and Destination\\nif [[ -d \"${GPG_KEY_WORKING_FOLDER}\" ]]; then\\n    CMD_RESULT=$(sudo rsync -av --progress \"${GPG_KEY_WORKING_FOLDER}/\" \"${GPG_KEY_IMPORT_SOURCE_PATH}/\")\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CMD_RESULT}\"\\nfi\\n\\ndisplay_project_details\\n",
        "SubApplication" : "Onboarding %%ZZM_USER_ID",
        "FileName" : "zzm.gpg.import.key.sh",
        "Host" : "ZZM_AGT_HUB",
        "CreatedBy" : "emadmin",
        "Description" : "Import GPG private and public key",
        "RunAs" : "ctmag",
        "Application" : "ZZM %%ZZM_COMPANY",
        "Variables" : [ {
          "VAR_ZZM_USER_ID" : "%%ZZM_USER_ID"
        }, {
          "VAR_ZZM_USER_EMAIL" : "%%ZZM_USER_EMAIL"
        }, {
          "VAR_ZZM_GPG_KEY_IMPORT_SOURCE_PATH" : "%%ZZM_GPG_KEY_IMPORT_SOURCE_PATH"
        }, {
          "VAR_ZZM_GPG_KEY_IMPORT_FILE_INFO" : "%%ZZM_GPG_INFO_FILE"
        } ],
        "When" : {
          "WeekDays" : [ "NONE" ],
          "MonthDays" : [ "NONE" ],
          "DaysRelation" : "OR"
        },
        "eventsToWaitFor" : {
          "Type" : "WaitForEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Clear_Agent-TO-ZZM_GPG_Import_Keys_%%SMART_ORDERID-190"
          } ]
        },
        "eventsToAdd" : {
          "Type" : "AddEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Import_Keys-TO-ZZM_GPG_Template_Deploy_%%SMART_ORDERID-190"
          } ]
        },
        "eventsToDelete" : {
          "Type" : "DeleteEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Clear_Agent-TO-ZZM_GPG_Import_Keys_%%SMART_ORDERID-190"
          } ]
        }
      },
      "ZZM GPG Profile" : {
        "Type" : "Job:EmbeddedScript",
        "Script" : "#!/bin/bash\\nset +x\\n# shellcheck enable=require-variable-braces\\n# file name: zzm.gpg.generate.key.sh\\n################################################################################\\n# License                                                                      #\\n################################################################################\\nfunction license() {\\n    # On MAC update bash: https://scriptingosx.com/2019/02/install-bash-5-on-macos/\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" GPL-3.0-only or GPL-3.0-or-later\"\\n    printf '%s\\n' \" Copyright (c) 2023 BMC Software, Inc.\"\\n    printf '%s\\n' \" Author: Volker Scheithauer\"\\n    printf '%s\\n' \" E-Mail: orchestrator@bmc.com\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is free software: you can redistribute it and/or modify\"\\n    printf '%s\\n' \" it under the terms of the GNU General Public License as published by\"\\n    printf '%s\\n' \" the Free Software Foundation, either version 3 of the License, or\"\\n    printf '%s\\n' \" (at your option) any later version.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is distributed in the hope that it will be useful,\"\\n    printf '%s\\n' \" but WITHOUT ANY WARRANTY; without even the implied warranty of\"\\n    printf '%s\\n' \" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\"\\n    printf '%s\\n' \" GNU General Public License for more details.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" You should have received a copy of the GNU General Public License\"\\n    printf '%s\\n' \" along with this program.  If not, see <https://www.gnu.org/licenses/>.\"\\n}\\n\\nfunction ctmLogo() {\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \"  @@@@@@@   @@@@@@   @@@  @@@  @@@@@@@  @@@@@@@    @@@@@@   @@@                  @@@@@@@@@@   \"\\n    printf '%s\\n' \" @@@@@@@@  @@@@@@@@  @@@@ @@@  @@@@@@@  @@@@@@@@  @@@@@@@@  @@@                  @@@@@@@@@@@  \"\\n    printf '%s\\n' \" !@@       @@!  @@@  @@!@!@@@    @@!    @@!  @@@  @@!  @@@  @@!                  @@! @@! @@!  \"\\n    printf '%s\\n' \" !@!       !@!  @!@  !@!!@!@!    !@!    !@!  @!@  !@!  @!@  !@!                  !@! !@! !@!  \"\\n    printf '%s\\n' \" !@!       @!@  !@!  @!@ !!@!    @!!    @!@!!@!   @!@  !@!  @!!       @!@!@!@!@  @!! !!@ @!@  \"\\n    printf '%s\\n' \" !!!       !@!  !!!  !@!  !!!    !!!    !!@!@!    !@!  !!!  !!!       !!!@!@!!!  !@!   ! !@!  \"\\n    printf '%s\\n' \" :!!       !!:  !!!  !!:  !!!    !!:    !!: :!!   !!:  !!!  !!:                  !!:     !!:  \"\\n    printf '%s\\n' \" :!:       :!:  !:!  :!:  !:!    :!:    :!:  !:!  :!:  !:!   :!:                 :!:     :!:  \"\\n    printf '%s\\n' \"  ::: :::  ::::: ::   ::   ::     ::    ::   :::  ::::: ::   :: ::::             :::     ::   \"\\n    printf '%s\\n' \"  :: :: :   : :  :   ::    :      :      :   : :   : :  :   : :: : :              :      :    \"\\n    printf '%s\\n' \"\"\\n}\\n\\n# CTM default OS group name\\nCTM_GROUP=\"controlm\"\\n\\n# Get current script folder\\n# shellcheck disable=SC2046 # this is intentional\\nDIR_NAME=$(cd $(dirname \"${BASH_SOURCE[0]}\") && pwd)\\nDIR_PARENT_NAME=$(dirname \"$(dirname \"$(readlink -f \"${BASH_SOURCE[0]}\")\")\")\\n\\n# compute working and config dir\\n# check if write permission\\nif [ -w \"${DIR_PARENT_NAME}\" ]; then\\n    WORKING_DIR=\"${DIR_PARENT_NAME}/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nelse\\n    WORKING_DIR=\"/tmp/zzm/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nfi\\n\\n# create working directory\\nif [ ! -d \"${WORKING_DIR}\" ]; then\\n    mkdir -p \"${WORKING_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${WORKING_DIR}\" -R\\n    chmod g+wrx \"${WORKING_DIR}\" -R\\nfi\\n\\nSCRIPT_SETTINGS=\"${CONFIG_DIR}/setup.settings.ini\"\\n# shellcheck disable=SC2034 # this is intentional\\nSCRIPT_DATA_FILE=\"${CONFIG_DIR}/data.json\"\\n\\n# Reset Colors\\n# shellcheck disable=SC2034 # this is intentional\\nColor_Off='\\033[0m' # Text Reset\\n\\n# Regular Colors\\n# shellcheck disable=SC2034 # this is intentional\\nBlack='\\033[0;30m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nRed='\\033[0;31m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nGreen='\\033[0;32m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nYellow='\\033[0;33m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nBlue='\\033[0;34m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nPurple='\\033[0;35m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nCyan='\\033[0;36m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nWhite='\\033[0;37m' # White\\n\\n# import bash colors\\nif [[ -f \"${SCRIPT_SETTINGS}\" ]]; then\\n    # shellcheck disable=SC1090 disable=SC2283 # this is intentional\\n    source <(grep = \"${SCRIPT_SETTINGS}\")\\nfi\\n\\n# Script defaults\\n# shellcheck disable=SC2034 # this is intentional\\nretcode=0\\n# shellcheck disable=SC2034 # this is intentional\\nSETUP_DIR=\"${DIR_NAME}\"\\n# shellcheck disable=SC2034 # this is intentional\\nSUDO_STATE=\"false\"\\n# shellcheck disable=SC2116 # this is intentional\\nSCRIPT_SHELL=$(echo \"${SHELL}\")\\n\\n# hostname is assumed to be a FQDN set during installation.\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nHOST_FQDN=$(cat /etc/hostname)\\nHOST_FQDN=$(hostname -f)\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nHOST_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $1}')\\n# shellcheck disable=SC2086 disable=SC2034 # this is intentional\\nDOMAIN_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $2\".\"$3}')\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nHOST_IPV4=$(ip address | grep -v \"127.0.0\" | grep \"inet \" | awk '{print $2}' | awk -F \"/\" '{print $1}' | head -n 1)\\n\\nDATE_TODAY=\"$(date '+%Y-%m-%d %H:%M:%S')\"\\nLOG_DATE=$(date +%Y%m%d)\\n\\n# check if write permission\\nif [ -w \"/var/log\" ]; then\\n    LOG_DIR=\"/var/log/zzm\"\\nelse\\n    LOG_DIR=\"${WORKING_DIR}/log\"\\nfi\\n\\nif [ ! -d \"${LOG_DIR}\" ]; then\\n    mkdir -p \"${LOG_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${LOG_DIR}\" -R\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nLOG_NAME=$(basename $0)\\nLOG_FILE=\"${LOG_DIR}/${LOG_NAME}.${LOG_DATE}.txt\"\\nif [[ ! -f \"${LOG_FILE}\" ]]; then\\n    echo ' .' | tee -a \"${LOG_FILE}\"\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nSCRIPT_NAME=\"${LOG_NAME}\"\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nSCRIPT_PURPOSE=\"generate gpg keys and export public key\"\\n\\nlicense\\nctmLogo\\n\\n# Extract the script parameters / shell variables\\n# CTM OS Job variables\\n\\n# VAR_ZZM_COMPANY -> %%ZZM_COMPANY\\n# VAR_ZZM_USER_ID -> %%ZZM_USER_ID\\n# VAR_ZZM_USER_EMAIL-> %%ZZM_USER_EMAIL\\n# VAR_ZZM_ZZM_CTM_ENVIRONMENT -> %%ZZM_ZZM_CTM_ENVIRONMENT\\n\\n# VAR_ZZM_AWS_S3_BUCKET -> %%ZZM_AWS_S3_BUCKET\\n# VAR_ZZM_AZURE_CONTAINER -> %%ZZM_AZURE_CONTAINER\\n# VAR_ZZM_GCS_BUCKET -> %%ZZM_GCS_BUCKET\\n# VAR_ZZM_OCI_BUCKET -> %%ZZM_OCI_BUCKET\\n# VAR_ZZM_FILE_NAME -> %%ZZM_FILE_NAME\\n# VAR_ZZM_VIRTUAL_FOLDER -> %%ZZM_VIRTUAL_FOLDER\\n# VAR_ZZM_SUB_DIR_PATH -> %%ZZM_SUB_DIR_PATH\\n# VAR_ZZM_FILE_ABS_PATH -> %%ZZM_FILE_ABS_PATH\\n# VAR_ZZM_FILE_PATH -> %%ZZM_FILE_PATH\\n# VAR_ZZM_FILE_DIR -> %%ZZM_FILE_DIR\\n# VAR_ZZM_FILE_ABS_DIR -> %%ZZM_FILE_ABS_DIR\\n# VAR_ZZM_FILE_EXT_NO_DOT -> %%ZZM_FILE_EXT_NO_DOT\\n\\n# VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER -> %%ZZM_ZZM_B2B_VIRTUAL_FOLDER\\n# VAR_ZZM_B2B_GROUP -> %%ZZM_B2B_GROUP\\n# VAR_ZZM_ZZM_B2B_SITE -> %%ZZM_ZZM_B2B_SITE\\n# VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER -> %%ZZM_B2B_SHARED_VIRTUAL_FOLDER\\n\\n# initialize b2b variables\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_COMPANY=$(env | grep \"VAR_ZZM_COMPANY\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_USER_ID=$(env | grep \"VAR_ZZM_USER_ID\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_USER_EMAIL=$(env | grep \"VAR_ZZM_USER_EMAIL\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_CTM_ENVIRONMENT=$(env | grep \"VAR_ZZM_CTM_ENVIRONMENT\" | awk -F \"=\" '{print $2}')\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AWS_S3_BUCKET=$(env | grep \"VAR_ZZM_AWS_S3_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AZURE_CONTAINER=$(env | grep \"VAR_ZZM_AZURE_CONTAINER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_GCS_BUCKET=$(env | grep \"VAR_ZZM_GCS_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_OCI_BUCKET=$(env | grep \"VAR_ZZM_OCI_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_NAME=$(env | grep \"VAR_ZZM_FILE_NAME\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_SUB_DIR_PATH=$(env | grep \"VAR_ZZM_SUB_DIR_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_PATH=$(env | grep \"VAR_ZZM_FILE_ABS_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_PATH=$(env | grep \"VAR_ZZM_FILE_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_DIR=$(env | grep \"VAR_ZZM_FILE_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_DIR=$(env | grep \"VAR_ZZM_FILE_ABS_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_EXT_NO_DOT=$(env | grep \"VAR_ZZM_FILE_EXT_NO_DOT\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_ZZM_B2B_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_GROUP=$(env | grep \"VAR_ZZM_B2B_GROUP\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SITE=$(env | grep \"VAR_ZZM_B2B_SITE\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SHARED_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n\\nlog() {\\n    echo \" -----------------------------------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" Start date          : ${DATE_TODAY}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Shell Name          : ${SCRIPT_SHELL}\" | tee -a \"${LOG_FILE}\"\\n    echo \" User Name           : ${USER}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host FDQN           : ${HOST_FQDN}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host Name           : ${HOST_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host IPv4           : ${HOST_IPV4}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Script Folder       : ${DIR_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Working Folder      : ${WORKING_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Config Folder       : ${CONFIG_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Data File           : ${SCRIPT_DATA_FILE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" Parent Folder       : ${DIR_PARENT_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Data Folder         : ${WORKING_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Config Folder       : ${CONFIG_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Binary          : ${GPG_BIN}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Name        : ${GPG_KEY_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key E-Mail      : ${GPG_KEY_EMAIL}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Passphrase  : ${GPG_KEY_PASSPHRASE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key File        : ${GPG_KEY_FILE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key ID          : ${GPG_KEY_ID}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key List        : ${GPG_KEY_LIST_CSV}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Data Folder     : ${GPG_KEY_WORKING_FOLDER}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Pub Path    : ${GPG_KEY_EXPORT_PATH_PUBLIC}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Priv Path   : ${GPG_KEY_EXPORT_PATH_PRIVATE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Pub File    : ${GPG_KEY_EXPORT_FILE_PUBLIC}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Key Priv File   : ${GPG_KEY_EXPORT_FILE_PRIVATE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Status          : ${GPG_KEY_STATUS}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Info Path       : ${GPG_KEY_EXPORT_PATH_INFO}\" | tee -a \"${LOG_FILE}\"\\n    echo \" GPG Info File       : ${GPG_KEY_EXPORT_FILE_INFO}\" | tee -a \"${LOG_FILE}\"\\n    echo \"  \" | tee -a \"${LOG_FILE}\"\\n}\\n\\n# Assign GPG binary\\nGPG_BIN=$(which gpg)\\n\\n# Replace \" \" with \"_\"\\n# shellcheck disable=SC2006 disable=SC2001 # this is intentional\\nGPG_KEY_NAME=$(echo \"${ZZM_USER_ID}\" | sed 's/ /_/g')\\nGPG_KEY_NAME_LCASE=$(echo \"${ZZM_USER_ID}\" | tr '[:upper:]' '[:lower:]')\\n\\n# assign email\\nGPG_KEY_EMAIL=\"${ZZM_USER_EMAIL}\"\\n\\n# Assign default passphrase\\nif [[ -f \"${SCRIPT_DATA_FILE}\" ]]; then\\n    SCRIPT_DATA=$(jq '.' \"${SCRIPT_DATA_FILE}\")\\n    # shellcheck disable=SC2034 # this is intentional\\n    GPG_KEY_PASSPHRASE_DEFAULT=$(echo \"${SCRIPT_DATA}\" | jq -r '.USERS.PWD')\\nfi\\n\\n# Assign default working folder\\nGPG_KEY_WORKING_FOLDER=\"${WORKING_DIR}/gpg/${GPG_KEY_NAME_LCASE}\"\\nif [ ! -d \"${GPG_KEY_WORKING_FOLDER}\" ]; then\\n    mkdir -p \"${GPG_KEY_WORKING_FOLDER}\"\\nfi\\n\\n# Compute Export File Name\\n# GPG in ASCII format\\nGPG_KEY_EXPORT_FILE_PUBLIC=\"${GPG_KEY_NAME_LCASE}.zzm.gpg.pub.asc\"\\nGPG_KEY_EXPORT_FILE_PRIVATE=\"${GPG_KEY_NAME_LCASE}.zzm.gpg.priv.asc\"\\nGPG_KEY_EXPORT_FILE_INFO=\"${GPG_KEY_NAME_LCASE}.zzm.gpg.info.json\"\\n\\nGPG_KEY_EXPORT_PATH_PUBLIC=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_EXPORT_FILE_PUBLIC}\"\\nGPG_KEY_EXPORT_PATH_PRIVATE=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_EXPORT_FILE_PRIVATE}\"\\nGPG_KEY_EXPORT_PATH_INFO=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_EXPORT_FILE_INFO}\"\\n\\n# write gpg text file\\nGPG_KEY_FILE=\"${GPG_KEY_NAME_LCASE}.zzm.gpg.lix\"\\nGPG_KEY_PATH=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_FILE}\"\\n\\n# Compute Passphrase\\n# random passphrase based on openssl random\\n# ignore default passphrase\\nif [ -z \"${GPG_KEY_PASSPHRASE}\" ]; then\\n    GPG_KEY_PASSPHRASE=$(openssl rand -base64 8)\\nfi\\n\\necho -e \"%echo Generating a basic OpenPGP key Pair\\n\\\\nKey-Type: DSA\\n\\\\nKey-Length: 2048\\n\\\\nSubkey-Type: ELG-E\\n\\\\nSubkey-Length: 2048\\n\\\\nName-Real: ${GPG_KEY_NAME}\\n\\\\n# Name-Comment: ${GPG_KEY_COMMENT}\\n\\\\nName-Email: ${GPG_KEY_EMAIL}\\n\\\\nExpire-Date: 0\\n\\\\nPassphrase: ${GPG_KEY_PASSPHRASE}\\n\\\\n# Do a commit here, so that we can later print \\\"done\\\" :-)\\n\\\\n#   commit\\n\\\\n#   echo done\\n\\\\n%commit\\n\" >\"${GPG_KEY_PATH}\"\\n\\n# Write a JSON file with GPG settings\\nfunction write_gpg_info_file() {\\n    local gpg_keyname=\"${1}\"\\n    local gpg_public=\"${2}\"\\n    local gpg_private=\"${3}\"\\n    local gpg_passphrase=\"${4}\"\\n\\n    jq -n \\\\n        --arg gpg_keyname \"${gpg_keyname}\" \\\\n        --arg gpg_public \"${gpg_public}\" \\\\n        --arg gpg_private \"${gpg_private}\" \\\\n        --arg gpg_passphrase \"${gpg_passphrase}\" \\\\n        '{\\n            \"name\": $gpg_keyname,        \\n            \"public\": $gpg_public,\\n            \"private\": $gpg_private,\\n            \"passphrase\": $gpg_passphrase\\n        }' >\"${GPG_KEY_EXPORT_PATH_INFO}\"\\n\\n    echo \"${GPG_KEY_EXPORT_PATH_INFO}\"\\n}\\n\\n# Process GPG requests\\nif [[ -f \"${GPG_KEY_PATH}\" ]]; then\\n    # shellcheck disable=SC2034 # this is intentional\\n    GPG_KEY_EXISTS=false\\n\\n    # check if the key already exists\\n    if gpg --list-keys | grep -q \"${GPG_KEY_NAME}\"; then\\n        GPG_KEY_FINGERPRINTS=$(gpg --list-keys --with-fingerprint --with-colons \"${GPG_KEY_NAME}\" 2>/dev/null | grep '^fpr' | cut -d':' -f10)\\n\\n        # Loop through all the fingerprints and delete the corresponding key(s)\\n        for GPG_KEY_FINGERPRINT in ${GPG_KEY_FINGERPRINTS}; do\\n            GPG_KEY_RESULT=$(gpg --batch --yes --delete-secret-keys \"${GPG_KEY_FINGERPRINT}\" 2>/dev/null)\\n            GPG_KEY_RESULT=$(gpg --batch --yes --delete-key \"${GPG_KEY_FINGERPRINT}\" 2>/dev/null)\\n        done\\n    fi\\n\\n    # Create a new GPG key\\n    GPG_KEY_RESULT=$(gpg --batch --generate-key \"${GPG_KEY_PATH}\" 2>/dev/null)\\n    GPG_KEY_RESULT=$(gpg --export --armor \"${GPG_KEY_NAME}\" >\"${GPG_KEY_EXPORT_PATH_PUBLIC}\" 2>/dev/null)\\n    GPG_KEY_FINGERPRINT=$(echo \"${GPG_KEY_RESULT}\" | grep \"gpg: key \" | sed 's/.*gpg: key \\([0-9A-F]*\\):.*/\\1/')\\n    # shellcheck disable=SC2034 # this is intentional\\n    GPG_KEY_PUBLIC=$(gpg --armor --export \"${GPG_KEY_FINGERPRINT}\" 2>/dev/null | jq -sR '.')\\n    GPG_KEY_ID=$(gpg --list-secret-keys \"${GPG_KEY_NAME}\" 2>/dev/null | grep \"^sec\" | awk '{print $2}' | cut -d'/' -f2)\\n\\n    # Export Private Key\\n    if gpg --list-keys | grep -q \"${GPG_KEY_NAME}\"; then\\n        GPG_KEY_ID=$(gpg --list-secret-keys --with-colons \"${GPG_KEY_NAME}\" | awk -F: '/^sec:/ { print $5 }')\\n        # shellcheck disable=SC2034 # this is intentional\\n        GPG_EXPORT_RESULT=$(echo \"${GPG_KEY_PASSPHRASE}\" | gpg --batch --yes --pinentry-mode loopback --armor --passphrase-fd 0 --export-secret-keys \"${GPG_KEY_ID}\" >\"${GPG_KEY_EXPORT_PATH_PRIVATE}\" 2>/dev/null)\\n    fi\\n\\n    if [ -d \"${GPG_KEY_WORKING_FOLDER}\" ]; then\\n        chgrp -R controlm \"${GPG_KEY_WORKING_FOLDER}\"\\n    fi\\n\\n    GPG_KEY_LIST=$(gpg --batch --list-keys --with-colons \"${GPG_KEY_NAME}\" | grep '^fpr' | cut -d':' -f10 | tr '\\n' ',' | sed 's/,$//')\\n    GPG_KEY_LIST_CSV=$(echo \"${GPG_KEY_LIST}\" | tr '\\n' ',' | sed 's/,$//')\\n\\n    if echo \"${GPG_KEY_LIST}\" | grep -Eq '^[^,]+,[^,]+$'; then\\n        GPG_KEY_STATUS=\"TRUE\"\\n        # shellcheck disable=SC2034 # this is intentional\\n        TMP_JSON_FILE=\"$(write_gpg_info_file \"${GPG_KEY_NAME}\" \"${GPG_KEY_EXPORT_FILE_PUBLIC}\" \"${GPG_KEY_EXPORT_FILE_PRIVATE}\" \"${GPG_KEY_PASSPHRASE}\")\"\\n\\n    else\\n        GPG_KEY_STATUS=\"FALSE\"\\n    fi\\n\\nfi\\n\\n# log the result\\nlog\\n\\necho \" ---------------------\" | tee -a \"${LOG_FILE}\"\\necho \" GPG Info: ${GPG_KEY_EXPORT_FILE_INFO}\" | tee -a \"${LOG_FILE}\"\\ncat \"${GPG_KEY_EXPORT_PATH_INFO}\"\\necho \" -----------------------------------------------\" | tee -a \"${LOG_FILE}\"\\necho \"  \" | tee -a \"${LOG_FILE}\"\\n\\n# Clean Up\\n",
        "SubApplication" : "Onboarding %%ZZM_USER_ID",
        "FileName" : "zzm.gpg.generate.key.sh",
        "Host" : "ZZM_CORE",
        "CreatedBy" : "emadmin",
        "Description" : "Create GPG Profile, Keys and Template",
        "RunAs" : "ctmag",
        "Application" : "ZZM %%ZZM_COMPANY",
        "Variables" : [ {
          "VAR_ZZM_USER_ID" : "%%ZZM_USER_ID"
        }, {
          "VAR_ZZM_USER_EMAIL" : "%%ZZM_USER_EMAIL"
        } ],
        "When" : {
          "WeekDays" : [ "NONE" ],
          "MonthDays" : [ "NONE" ],
          "DaysRelation" : "OR"
        },
        "CaptureOutput_2" : {
          "Type" : "Action:CaptureOutput",
          "Capture" : "UpToEndOfLine",
          "Search" : "GPG Key Passphrase  :",
          "VariableName" : "\\\\ZZM_GPG_KEY_PASSPHRASE",
          "ForwardBy" : {
            "Columns" : "1",
            "Delimiter" : "Space",
            "ColumnsOption" : "Characters"
          }
        },
        "CaptureOutput_3" : {
          "Type" : "Action:CaptureOutput",
          "Capture" : "UpToEndOfLine",
          "Search" : " GPG Info Path       :",
          "VariableName" : "\\\\ZZM_GPG_INFO_FILE_PATH",
          "ForwardBy" : {
            "Columns" : "1",
            "ColumnsOption" : "Characters"
          }
        },
        "CaptureOutput_4" : {
          "Type" : "Action:CaptureOutput",
          "Capture" : "UpToEndOfLine",
          "Search" : "GPG Info File       :",
          "VariableName" : "\\\\ZZM_GPG_INFO_FILE",
          "ForwardBy" : {
            "Columns" : "1",
            "ColumnsOption" : "Characters"
          }
        },
        "CaptureOutput_5" : {
          "Type" : "Action:CaptureOutput",
          "Capture" : "UpToEndOfLine",
          "Search" : "GPG Data Folder     :",
          "VariableName" : "\\\\ZZM_GPG_DATA_FOLDER",
          "ForwardBy" : {
            "Columns" : "1",
            "ColumnsOption" : "Characters"
          }
        },
        "CaptureOutput_6" : {
          "Type" : "Action:CaptureOutput",
          "Capture" : "UpToEndOfLine",
          "Search" : "GPG Key Pub Path    :",
          "VariableName" : "\\\\ZZM_GPG_PUBLIC_FILE_PATH",
          "ForwardBy" : {
            "Columns" : "1",
            "ColumnsOption" : "Characters"
          }
        },
        "CaptureOutput_7" : {
          "Type" : "Action:CaptureOutput",
          "Capture" : "UpToEndOfLine",
          "Search" : "GPG Key Priv Path   :",
          "VariableName" : "\\\\ZZM_GPG_PRIVATE_FILE_PATH",
          "ForwardBy" : {
            "Columns" : "1",
            "ColumnsOption" : "Characters"
          }
        },
        "CaptureOutput_8" : {
          "Type" : "Action:CaptureOutput",
          "Capture" : "UpToEndOfLine",
          "Search" : "GPG Key Pub File    :",
          "VariableName" : "\\\\ZZM_GPG_PUBLIC_FILE_NAME",
          "ForwardBy" : {
            "Columns" : "1",
            "ColumnsOption" : "Characters"
          }
        },
        "CaptureOutput_9" : {
          "Type" : "Action:CaptureOutput",
          "Capture" : "UpToEndOfLine",
          "Search" : "GPG Key Priv File   :",
          "VariableName" : "\\\\ZZM_GPG_PRIVATE_FILE_NAME",
          "ForwardBy" : {
            "Columns" : "1",
            "ColumnsOption" : "Characters"
          }
        },
        "eventsToAdd" : {
          "Type" : "AddEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Profile-TO-ZZM_GPG_Transfer_%%SMART_ORDERID-190"
          } ]
        }
      },
      "ZZM GPG Template Deploy" : {
        "Type" : "Job:EmbeddedScript",
        "Script" : "#!/bin/bash\\nset +x\\n# shellcheck enable=require-variable-braces\\n# file name: zzm.gpg.deploy.template.sh\\n# -- Start of boilerplate --\\nprintf \"\\033c\"\\n################################################################################\\n# License                                                                      #\\n################################################################################\\n\\nfunction license() {\\n    printf \"%s\\n\" \"\"\\n    printf \"%s\\n\" \" GPL-3.0-only or GPL-3.0-or-later\"\\n    printf \"%s\\n\" \" Copyright (c) 2021 BMC Software, Inc.\"\\n    printf \"%s\\n\" \" Author: Volker Scheithauer\"\\n    printf \"%s\\n\" \" E-Mail: orchestrator@bmc.com\"\\n    printf \"%s\\n\" \"\"\\n    printf \"%s\\n\" \" This program is free software: you can redistribute it and/or modify\"\\n    printf \"%s\\n\" \" it under the terms of the GNU General Public License as published by\"\\n    printf \"%s\\n\" \" the Free Software Foundation, either version 3 of the License, or\"\\n    printf \"%s\\n\" \" (at your option) any later version.\"\\n    printf \"%s\\n\" \"\"\\n    printf \"%s\\n\" \" This program is distributed in the hope that it will be useful,\"\\n    printf \"%s\\n\" \" but WITHOUT ANY WARRANTY; without even the implied warranty of\"\\n    printf \"%s\\n\" \" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\"\\n    printf \"%s\\n\" \" GNU General Public License for more details.\"\\n    printf \"%s\\n\" \"\"\\n    printf \"%s\\n\" \" You should have received a copy of the GNU General Public License\"\\n    printf \"%s\\n\" \" along with this program.  If not, see <https://www.gnu.org/licenses/>.\"\\n}\\n\\nfunction ctmLogo() {\\n    printf \"%s\\n\" \"\"\\n    printf \"%s\\n\" \"  @@@@@@@   @@@@@@   @@@  @@@  @@@@@@@  @@@@@@@    @@@@@@   @@@                  @@@@@@@@@@   \"\\n    printf \"%s\\n\" \" @@@@@@@@  @@@@@@@@  @@@@ @@@  @@@@@@@  @@@@@@@@  @@@@@@@@  @@@                  @@@@@@@@@@@  \"\\n    printf \"%s\\n\" \" !@@       @@!  @@@  @@!@!@@@    @@!    @@!  @@@  @@!  @@@  @@!                  @@! @@! @@!  \"\\n    printf \"%s\\n\" \" !@!       !@!  @!@  !@!!@!@!    !@!    !@!  @!@  !@!  @!@  !@!                  !@! !@! !@!  \"\\n    printf \"%s\\n\" \" !@!       @!@  !@!  @!@ !!@!    @!!    @!@!!@!   @!@  !@!  @!!       @!@!@!@!@  @!! !!@ @!@  \"\\n    printf \"%s\\n\" \" !!!       !@!  !!!  !@!  !!!    !!!    !!@!@!    !@!  !!!  !!!       !!!@!@!!!  !@!   ! !@!  \"\\n    printf \"%s\\n\" \" :!!       !!:  !!!  !!:  !!!    !!:    !!: :!!   !!:  !!!  !!:                  !!:     !!:  \"\\n    printf \"%s\\n\" \" :!:       :!:  !:!  :!:  !:!    :!:    :!:  !:!  :!:  !:!   :!:                 :!:     :!:  \"\\n    printf \"%s\\n\" \"  ::: :::  ::::: ::   ::   ::     ::    ::   :::  ::::: ::   :: ::::             :::     ::   \"\\n    printf \"%s\\n\" \"  :: :: :   : :  :   ::    :      :      :   : :   : :  :   : :: : :              :      :    \"\\n    printf \"%s\\n\" \"\"\\n}\\n\\n# Logging function\\nlog_entry() {\\n    local key=\"$1\"\\n    local value=\"$2\"\\n    local level=\"${PROJECT_LOG_LEVEL}\"\\n    # shellcheck disable=SC2034 # this is intentionals\\n    SCRIPT_CMD_LOG=$(echo \"$(date '+[%Y-%m-%d %H:%M:%S,000]') [${CLASS_NAME}] [${level}] ${key}: ${value}\" | tee -a \"${LOG_FILE}\")\\n\\n}\\n\\nlog_with_timestamp() {\\n    local level=\"$1\"\\n    local message=\"$2\"\\n    local header=\"${API_ACTION:-UNKNOWN_ACTION}\"\\n    # shellcheck disable=SC2034 # this is intentionals\\n    SCRIPT_CMD_LOG=$(echo \"${message}\" | while IFS= read -r line; do\\n        echo \"$(date '+[%Y-%m-%d %H:%M:%S,000]') [${CLASS_NAME}] [${level}] [${header}] ${line}\"\\n    done | tee -a \"${LOG_FILE}\")\\n}\\n\\n# Get current script folder\\n# shellcheck disable=SC2046 # this is intentional\\nDIR_NAME=$(cd $(dirname \"${BASH_SOURCE[0]}\") && pwd)\\nDIR_PARENT_NAME=$(dirname \"$(dirname \"$(readlink -f \"${BASH_SOURCE[0]}\")\")\")\\n\\n# compute working and config dir\\n# check if write permission\\nif [ -w \"${DIR_PARENT_NAME}\" ]; then\\n    WORKING_DIR=\"${DIR_PARENT_NAME}/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nelse\\n    WORKING_DIR=\"/tmp/zzm/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nfi\\n\\n# create working directory\\nif [ ! -d \"${WORKING_DIR}\" ]; then\\n    mkdir -p \"${WORKING_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${WORKING_DIR}\" -R\\n    chmod g+wrx \"${WORKING_DIR}\" -R\\nfi\\n\\n# shellcheck disable=SC2034 # this is intentional\\nSCRIPT_DATA_FILE=\"${CONFIG_DIR}/data.json\"\\n\\n# Reset Colors\\n# shellcheck disable=SC2034 # this is intentional\\nColor_Off='\\033[0m' # Text Reset\\n\\n# Regular Colors\\n# shellcheck disable=SC2034 # this is intentional\\nBLUE=\"\\033[0;34m\"\\n# shellcheck disable=SC2034 # this is intentional\\nLIGHT_BLUE=\"\\033[0;94m\"\\n# shellcheck disable=SC2034 # this is intentional\\nCYAN=\"\\033[0;36m\"\\n# shellcheck disable=SC2034 # this is intentional\\nLIGHT_CYAN=\"\\033[0;96m\"\\n# shellcheck disable=SC2034 # this is intentional\\nYELLOW=\"\\033[0;33m\"\\n# shellcheck disable=SC2034 # this is intentional\\nORANGE=\"\\033[0;91m\"\\n# shellcheck disable=SC2034 # this is intentional\\nRESET=\"\\033[0m\"\\n# shellcheck disable=SC2034 # this is intentional\\nDARK_GREY=\"\\033[1;30m\"\\n\\n# shellcheck disable=SC2034 # this is intentional\\nBlack='\\033[0;30m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nRed='\\033[0;31m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nGreen='\\033[0;32m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nYellow='\\033[0;33m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nBlue='\\033[0;34m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nPurple='\\033[0;35m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nCyan='\\033[0;36m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nWhite='\\033[0;37m' # White\\n\\n# Bold\\n# shellcheck disable=SC2034 # this is intentional\\nBBlack='\\033[1;30m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nBRed='\\033[1;31m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nBGreen='\\033[1;32m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nBYellow='\\033[1;33m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nBBlue='\\033[1;34m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nBPurple='\\033[1;35m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nBCyan='\\033[1;36m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nBWhite='\\033[1;37m' # White\\n\\n# High Intensity\\n# shellcheck disable=SC2034 # this is intentional\\nIBlack='\\033[0;90m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nIRed='\\033[0;91m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nIGreen='\\033[0;92m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nIYellow='\\033[0;93m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nIBlue='\\033[0;94m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nIPurple='\\033[0;95m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nICyan='\\033[0;96m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nIWhite='\\033[0;97m' # White\\n\\n# Script defaults\\n# shellcheck disable=SC2034 # this is intentional\\nretcode=0\\n# shellcheck disable=SC2034 # this is intentional\\nSETUP_DIR=\"${DIR_NAME_PARENT}\"\\n# shellcheck disable=SC2034 # this is intentional\\nSUDO_STATE=\"false\"\\n# shellcheck disable=SC2116 disable=SC2034 # this is intentional\\nSCRIPT_SHELL=$(echo \"${SHELL}\")\\n\\n# hostname is assumed to be a FQDN set during installation.\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_FQDN=$(hostname -f)\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $1}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nDOMAIN_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $2\".\"$3}')\\n\\n# CTM Agent specific variables\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_CONTROLM_PROCLOG=$(env | grep \"CONTROLM_PROCLOG\" | awk -F \"=\" '{print $2}')\\n\\n# logging configuration\\n# requires script variables\\nDATE_TODAY=\"$(date '+%Y-%m-%d %H:%M:%S')\"\\n# shellcheck disable=SC2116 disable=SC2034 # this is intentional\\nLOG_DATE=$(date +%Y%m%d)\\nPROJECT_LOG_LEVEL=\"INFO\"\\n\\n# Compute log folder\\nif [ -z \"${ZZM_CONTROLM_PROCLOG}\" ]; then\\n    LOG_DIR=\"${WORKING_DIR}/zzm\"\\nelse\\n    LOG_DIR=\"${ZZM_CONTROLM_PROCLOG}/zzm\"\\nfi\\n\\nif [ ! -d \"${LOG_DIR}\" ]; then\\n    mkdir -p \"${LOG_DIR}\"\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nLOG_NAME=$(basename $0)\\n\\n# AWS Project log\\nLOG_NAME=\"gpg\"\\n\\nLOG_FILE=\"${LOG_DIR}/${LOG_NAME}.log\"\\nif [[ ! -f \"${LOG_FILE}\" ]]; then\\n    log_entry \"Init Log File\" \"'${LOG_FILE}'\"\\nfi\\n\\n# Linux Distribution\\nOS_NAME=$(uname -s)\\n\\nif [[ \"$OS_NAME\" == \"Darwin\" ]]; then\\n    # macOS\\n    DISTRIBUTION=\"macOS\"\\n    DISTRIBUTION_PRETTY_NAME=$(sw_vers -productName) # This will return \"Mac OS X\" for older versions or \"macOS\" for newer versions\\n    USER_NAME=$(whoami)\\n    HOST_IPV4=$(ifconfig | grep -v \"127.0.0\" | grep \"inet \" | awk '{print $2}' | head -n 1)\\n\\nelse\\n    # Assuming Linux for other cases\\n    # shellcheck disable=SC2116 disable=SC2034 # this is intentional\\n    DISTRIBUTION=$(cat /etc/*-release | uniq -u | grep \"^NAME\" | awk -F \"=\" '{ gsub(\"\\\"\", \"\",$2); print $2}')\\n    DISTRIBUTION_PRETTY_NAME=$(cat /etc/*-release | uniq -u | grep \"^PRETTY_NAME\" | awk -F \"=\" '{ gsub(\"\\\"\", \"\",$2); print $2}')\\n    # shellcheck disable=SC2116 # this is intentionals\\n    USER_NAME=$(whoami)\\n    # shellcheck disable=SC2034 # this is intentionals\\n    USER_HOME=$(getent passwd \"${USER_NAME}\" | cut -d: -f6)\\n    USER_GROUP=$(id -gn \"${USER_NAME}\")\\n    USER_GROUPS=$(groups \"${USER_NAME}\")\\n    HOST_IPV4=$(ip address | grep -v \"127.0.0\" | grep \"inet \" | awk '{print $2}' | awk -F \"/\" '{print $1}' | head -n 1)\\nfi\\n\\n# CTM default OS group name\\nCTM_ADMIN_GROUP=\"controlm\"\\n\\n# check if CTM admin group exists and user is a member of\\nif echo \"${USER_GROUPS}\" | grep -q \"\\b${CTM_ADMIN_GROUP}\\b\"; then\\n    CTM_GROUP=\"${CTM_ADMIN_GROUP}\"\\nelse\\n    # shellcheck disable=SC2034 # this is intentionals\\n    CTM_GROUP=\"${USER_GROUP}\"\\nfi\\n\\n# JAVA version\\nJAVA_HOME=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home'\" | awk -F \"= \" '{print $2}')\\nJAVA_VERSION=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.runtime.version'\" | awk -F \"= \" '{print $2}')\\nJAVA_RUNTIME=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.runtime.name'\" | awk -F \"= \" '{print $2}')\\n\\n# Sleep Time for AWS API calls\\n# shellcheck disable=SC2116 disable=SC2034 # this is intentional\\nSLEEP_TIME=\"15\"\\n\\nfunction display_info() {\\n\\n    # Calculate the length of the variable and the number of '-' characters\\n    LENGTH=${#JAVA_HOME}\\n    TOTAL_LENGTH=$((LENGTH + 24)) # 24 is the length of \" - Source File   : \" string\\n    # shellcheck disable=SC2183 # this is intentional\\n    SEPARATOR=$(printf '%*s' \"$TOTAL_LENGTH\" | tr ' ' '-')\\n\\n    printf \"\\n\"\\n    printf \" - %s - \\n\" \"${SCRIPT_PURPOSE}\"\\n    printf \" -----------------------------------------------\\n\"\\n    printf \" Date           : %s\\n\" \"${DATE_TODAY}\"\\n    printf \" Distribution   : %s\\n\" \"${DISTRIBUTION_PRETTY_NAME}\"\\n    printf \" User Name      : %s\\n\" \"${USER}\"\\n    printf \" User Group     : %s\\n\" \"${CTM_GROUP}\"\\n\\n    printf \" Sudo Mode      : %s\\n\" \"${SUDO_STATE}\"\\n    printf \" Domain Name    : %s\\n\" \"${DOMAIN_NAME}\"\\n    printf \" Host FDQN      : %s\\n\" \"${HOST_FQDN}\"\\n    printf \" Host Name      : %s\\n\" \"${HOST_NAME}\"\\n    printf \" Host IPv4      : %s\\n\" \"${HOST_IPV4}\"\\n    printf \" Agent Folder   : %s\\n\" \"${DIR_NAME_PARENT}\"\\n    printf \" Script Folder  : %s\\n\" \"${DIR_NAME}\"\\n    printf \" Working Folder : %s\\n\" \"${WORKING_DIR}\"\\n    printf \" Config Folder  : %s\\n\" \"${CONFIG_DIR}\"\\n    printf \" Log Folder     : %s\\n\" \"${LOG_DIR}\"\\n    printf \" ---------------------\\n\"\\n    printf \" Data File      : %s\\n\" \"${SCRIPT_DATA_FILE}\"\\n    printf \" Data Folder    : %s\\n\" \"${CONFIG_DIR}\"\\n    printf \" JAVA Version   : %s\\n\" \"${JAVA_VERSION}\"\\n    printf \" JAVA RunTime   : %s\\n\" \"${JAVA_RUNTIME}\"\\n    printf \" JAVA Home      : %s\\n\" \"${JAVA_HOME}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n\\n    log_entry \"Script Purpose\" \"${SCRIPT_PURPOSE}\"\\n    log_entry \"Date\" \"${DATE_TODAY}\"\\n    log_entry \"Distribution\" \"${DISTRIBUTION_PRETTY_NAME}\"\\n    log_entry \"User Name\" \"${USER}\"\\n    log_entry \"User Group\" \"${CTM_GROUP}\"\\n    log_entry \"Sudo Mode\" \"${SUDO_STATE}\"\\n    log_entry \"Domain Name\" \"${DOMAIN_NAME}\"\\n    log_entry \"Host FDQN\" \"${HOST_FQDN}\"\\n    log_entry \"Host Name\" \"${HOST_NAME}\"\\n    log_entry \"Host IPv4\" \"${HOST_IPV4}\"\\n    log_entry \"Agent Folder\" \"'${DIR_NAME_PARENT}'\"\\n    log_entry \"Script Folder\" \"'${DIR_NAME}'\"\\n    log_entry \"Working Folder\" \"'${WORKING_DIR}'\"\\n    log_entry \"Config Folder\" \"'${CONFIG_DIR}'\"\\n    log_entry \"Log Folder\" \"'${LOG_DIR}'\"\\n    log_entry \"Data File\" \"'${SCRIPT_DATA_FILE}'\"\\n    log_entry \"Data Folder\" \"'${CONFIG_DIR}'\"\\n    log_entry \"JAVA Version\" \"${JAVA_VERSION}\"\\n    log_entry \"JAVA RunTime\" \"${JAVA_RUNTIME}\"\\n    log_entry \"JAVA Home\" \"'${JAVA_HOME}'\"\\n}\\n\\n# Show license, logo and info\\nlicense\\nctmLogo\\ndisplay_info\\n\\n# Extract the script parameters / shell variables\\n# CTM OS Job variables\\n\\n# VAR_ZZM_GPG_KEY_IMPORT_SOURCE_PATH -> %%ZZM_GPG_KEY_IMPORT_SOURCE_PATH\\n# VAR_ZZM_GPG_KEY_IMPORT_FILE_INFO -> %%ZZM_GPG_INFO_FILE\\n# --file %%ZZM_GPG_INFO_FILE\\n# --directory '/opt/ctmag/ctm/cm/AFT/ftshome/b2bhome/%%ZZM_USER_ID/onboarding'\\n\\n# VAR_ZZM_COMPANY -> %%ZZM_COMPANY\\n# VAR_ZZM_USER_ID -> %%ZZM_USER_ID\\n# VAR_ZZM_USER_EMAIL-> %%ZZM_USER_EMAIL\\n# VAR_ZZM_ZZM_CTM_ENVIRONMENTIRONMENT -> %%ZZM_ZZM_CTM_ENVIRONMENTIRONMENT\\n# VAR_ZZM_CTM_HOST_GROUP -> %%ZZM_CTM_HOST_GROUP\\n\\n# VAR_ZZM_AWS_S3_BUCKET -> %%ZZM_AWS_S3_BUCKET\\n# VAR_ZZM_AZURE_CONTAINER -> %%ZZM_AZURE_CONTAINER\\n# VAR_ZZM_GCS_BUCKET -> %%ZZM_GCS_BUCKET\\n# VAR_ZZM_OCI_BUCKET -> %%ZZM_OCI_BUCKET\\n# VAR_ZZM_FILE_NAME -> %%ZZM_FILE_NAME\\n# VAR_ZZM_VIRTUAL_FOLDER -> %%ZZM_VIRTUAL_FOLDER\\n# VAR_ZZM_SUB_DIR_PATH -> %%ZZM_SUB_DIR_PATH\\n# VAR_ZZM_FILE_ABS_PATH -> %%ZZM_FILE_ABS_PATH\\n# VAR_ZZM_FILE_PATH -> %%ZZM_FILE_PATH\\n# VAR_ZZM_FILE_DIR -> %%ZZM_FILE_DIR\\n# VAR_ZZM_FILE_ABS_DIR -> %%ZZM_FILE_ABS_DIR\\n# VAR_ZZM_FILE_EXT_NO_DOT -> %%ZZM_FILE_EXT_NO_DOT\\n\\n# VAR_ZZM_B2B_VIRTUAL_FOLDER -> %%ZZM_B2B_VIRTUAL_FOLDER\\n# VAR_ZZM_B2B_GROUP -> %%ZZM_B2B_GROUP\\n# VAR_ZZM_B2B_SITE -> %%ZZM_B2B_SITE\\n# VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER -> %%ZZM_B2B_SHARED_VIRTUAL_FOLDER\\n\\n# initialize b2b variables\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nGPG_KEY_IMPORT_SOURCE_PATH=$(env | grep \"VAR_ZZM_GPG_KEY_IMPORT_SOURCE_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nGPG_KEY_IMPORT_FILE_INFO=$(env | grep \"VAR_ZZM_GPG_KEY_IMPORT_FILE_INFO\" | awk -F \"=\" '{print $2}')\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_COMPANY=$(env | grep \"VAR_ZZM_COMPANY\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_USER_ID=$(env | grep \"VAR_ZZM_USER_ID\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_USER_EMAIL=$(env | grep \"VAR_ZZM_USER_EMAIL\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_CTM_ENVIRONMENT=$(env | grep \"VAR_ZZM_CTM_ENVIRONMENT\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_CTM_HOST_GROUP=$(env | grep \"VAR_ZZM_CTM_HOST_GROUP\" | awk -F \"=\" '{print $2}')\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AWS_S3_BUCKET=$(env | grep \"VAR_ZZM_AWS_S3_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AZURE_CONTAINER=$(env | grep \"VAR_ZZM_AZURE_CONTAINER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_GCS_BUCKET=$(env | grep \"VAR_ZZM_GCS_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_OCI_BUCKET=$(env | grep \"VAR_ZZM_OCI_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_NAME=$(env | grep \"VAR_ZZM_FILE_NAME\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_SUB_DIR_PATH=$(env | grep \"VAR_ZZM_SUB_DIR_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_PATH=$(env | grep \"VAR_ZZM_FILE_ABS_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_PATH=$(env | grep \"VAR_ZZM_FILE_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_DIR=$(env | grep \"VAR_ZZM_FILE_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_DIR=$(env | grep \"VAR_ZZM_FILE_ABS_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_EXT_NO_DOT=$(env | grep \"VAR_ZZM_FILE_EXT_NO_DOT\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_B2B_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_GROUP=$(env | grep \"VAR_ZZM_B2B_GROUP\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SITE=$(env | grep \"VAR_ZZM_B2B_SITE\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SHARED_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n\\nfunction display_project_details() {\\n    # Calculate the length of the variable and the number of '-' characters\\n    LENGTH=${#GPG_KEY_WORKING_FOLDER}\\n    TOTAL_LENGTH=$((LENGTH + 28)) # 24 is the length of \" - Source File   : \" string\\n    # shellcheck disable=SC2183 # this is intentional\\n    SEPARATOR=$(printf '%*s' \"$TOTAL_LENGTH\" | tr ' ' '-')\\n\\n    printf \"\\n\"\\n    # shellcheck disable=SC2059 # this is intentional\\n    printf \" ---- Project Details ----\\n\"\\n    printf \" - CTM Environment     : %s\\n\" \"${ZZM_CTM_ENVIRONMENT}\"\\n    printf \" - CTM Server          : %s\\n\" \"${CTM_SERVER}\"\\n    printf \" - CTM Host Group      : %s\\n\" \"${ZZM_CTM_HOST_GROUP}\"\\n    printf \" - CTM Node ID         : %s\\n\" \"${CTM_NODE}\"\\n    printf \" - CTM Agents #        : %s\\n\" \"${CTM_AGENT_COUNT}\"\\n    printf \" - CTM Active Agents   : %s\\n\" \"${CTM_ALL_ACTIVE_AGENTS}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    # shellcheck disable=SC2059 # this is intentional\\n    printf \" ---- Processing Control-M Agents ----\\n\"\\n\\n    IFS=',' read -ra CTM_AGENT_TEMP <<<\"${CTM_ACTIVE_AGENTS}\"\\n    for CTM_AGENT in \"${CTM_AGENT_TEMP[@]}\"; do\\n        printf \" - CTM Agent           : %s\\n\" \"${CTM_AGENT}\"\\n    done\\n\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Template Name   : %s\\n\" \"${CTM_GPG_TEMPLATE_NAME}\"\\n    printf \" - GPG Template File   : %s\\n\" \"${GPG_KEY_TEMPLATE_PATH}\"\\n    printf \" - GPG Recipient       : %s\\n\" \"${GPG_KEY_RECIPIENT}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Binary Local    : %s\\n\" \"${GPG_PATH}\"\\n    printf \" - GPG Binary CTM Agent: %s\\n\" \"${GPG_BIN_PATH}\"\\n    printf \" - GPG Action          : %s\\n\" \"${GPG_KEY_ACTION}\"\\n    printf \" - GPG Working Folder  : %s\\n\" \"${GPG_KEY_WORKING_FOLDER}\"\\n    printf \" - GPG Info File       : %s\\n\" \"${GPG_KEY_IMPORT_FILE_INFO}\"\\n    printf \" - GPG Info File Path  : %s\\n\" \"${GPG_KEY_IMPORT_PATH_INFO}\"\\n    printf \" - GPG Template File   : %s\\n\" \"${GPG_KEY_TEMPLATE_FILE}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Key Name        : %s\\n\" \"${GPG_KEY_NAME}\"\\n    printf \" - GPG Key E-Mail      : %s\\n\" \"${GPG_KEY_EMAIL}\"\\n    printf \" - GPG Key Passphrase  : %s\\n\" \"${GPG_KEY_PASSPHRASE}\"\\n    printf \" - GPG Key ID          : %s\\n\" \"${GPG_KEY_ID}\"\\n    printf \" - GPG UID Attribute   : %s\\n\" \"${GPG_UID_ATTRIBUTE}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Key Status       : %s\\n\" \"${GPG_KEY_STATUS}\"\\n    printf \" - CTM Template Status  : %s\\n\" \"${CTM_PGP_STATUS}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n    printf \" - GPG Source File      : %s\\n\" \"${GPG_KEY_IMPORT_SOURCE_PATH_INFO}\"\\n    # printf \" - GPG Info Content     : %s\\n\" \"${GPG_KEY_IMPORT_INFO}\"\\n    printf \" %s\\n\" \"${SEPARATOR}\"\\n\\n}\\n\\n# -- End of boilerplate --\\n\\n# Replace \" \" with \"_\"\\n# shellcheck disable=SC2006 disable=SC2001 # this is intentional\\nGPG_KEY_NAME=$(echo \"${ZZM_USER_ID}\" | sed 's/ /_/g')\\nGPG_KEY_NAME_LCASE=$(echo \"${ZZM_USER_ID}\" | tr '[:upper:]' '[:lower:]')\\n\\n# Assign default working folder\\nGPG_KEY_WORKING_FOLDER=\"${WORKING_DIR}/gpg/${GPG_KEY_NAME_LCASE}\"\\nif [ ! -d \"${GPG_KEY_WORKING_FOLDER}\" ]; then\\n    mkdir -p \"${GPG_KEY_WORKING_FOLDER}\"\\nfi\\n\\n# exit script if no gpg source file provided\\nif [ -z \"${GPG_KEY_IMPORT_FILE_INFO}\" ]; then\\n    exit 1\\nfi\\n\\n# assign default action\\nif [ -z \"${GPG_KEY_ACTION}\" ]; then\\n    GPG_KEY_ACTION=\"data driven\"\\nfi\\n\\n# Copy GPG file to data directory\\nGPG_KEY_IMPORT_SOURCE_PATH_INFO=\"${GPG_KEY_IMPORT_SOURCE_PATH}/${GPG_KEY_IMPORT_FILE_INFO}\"\\nGPG_KEY_IMPORT_PATH_INFO=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_IMPORT_FILE_INFO}\"\\n\\nif [[ -d \"${GPG_KEY_IMPORT_SOURCE_PATH}\" ]]; then\\n    CMD_RESULT=$(sudo rsync -av --progress \"${GPG_KEY_IMPORT_SOURCE_PATH}/\" \"${GPG_KEY_WORKING_FOLDER}/\")\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CMD_RESULT}\"\\n    sudo chown \"${USER}\":\"${CTM_GROUP}\" \"${GPG_KEY_WORKING_FOLDER}\" -R\\n    sudo chmod g+wrx \"${GPG_KEY_WORKING_FOLDER}\" -R\\nfi\\n\\nif [[ -f \"${GPG_KEY_IMPORT_PATH_INFO}\" ]]; then\\n\\n    API_ACTION=\"Process OpenGPG Key file\"\\n    echo \" \"\\n    echo -e \"  # Stage       -> ${API_ACTION}\"\\n    log_with_timestamp \"INFO\" \"Start\"\\n\\n    GPG_KEY_IMPORT_INFO=$(jq '.' \"${GPG_KEY_IMPORT_PATH_INFO}\")\\n    GPG_UPDATE_DATA=\"${GPG_KEY_IMPORT_INFO}\"\\n\\n    # Extract GPG details from the GPG info file\\n    GPG_KEY_NAME=$(echo \"${GPG_KEY_IMPORT_INFO}\" | jq -r '.name')\\n    GPG_KEY_ID=$(echo \"${GPG_KEY_IMPORT_INFO}\" | jq -r '.keyid.private')\\n    GPG_KEY_PASSPHRASE=$(echo \"${GPG_KEY_IMPORT_INFO}\" | jq -r '.passphrase')\\n\\n    # CTM GPG templat name, can't start with #\\n    CTM_GPG_TEMPLATE_NAME=\"ZZM_${GPG_KEY_ID}\"\\n    CTM_SECRET_NAME=\"ZGPG_${GPG_KEY_ID}\"\\n\\n    # Replace \" \" with \"_\"\\n    # shellcheck disable=SC2001 disable=SC2034 # this is intentional\\n    GPG_KEY_NAME_LCASE=$(echo \"${GPG_KEY_NAME}\" | tr '[:upper:]' '[:lower:]')\\n    # shellcheck disable=SC2001 # this is intentional\\n    #GPG_KEY_RECIPIENT=$(echo \"${GPG_KEY_RECIPIENT}\" | sed 's/ /_/g')\\n    GPG_KEY_RECIPIENT=$(echo \"${GPG_KEY_NAME}\" | sed 's/ /_/g')\\n\\n    # Compute Export File\\n    GPG_KEY_TEMPLATE_FILE=\"dsse.gpg.template.json\"\\n    GPG_KEY_TEMPLATE_PATH=\"${GPG_KEY_WORKING_FOLDER}/${GPG_KEY_TEMPLATE_FILE}\"\\n\\n    # Get GPG Binary Location\\n    GPG_PATH=$(which gpg)\\n    # Assign GPG Binary Location for Control-M Agents\\n    GPG_BIN_PATH=\"/usr/bin/gpg\"\\n\\n    # Write a JSON file with B2B settings\\n    function create_json_file() {\\n        local name=\"${1}\"\\n        local executable_path=\"${2}\"\\n        local passphrase=\"${3}\"\\n        local recipient=\"${4}\"\\n        local encryption_attributes=\"${5}\"\\n        local decryption_attributes=\"${6}\"\\n        local file=\"${7}\"\\n\\n        jq -n \\\\n            --arg name \"${name}\" \\\\n            --arg path \"${executable_path}\" \\\\n            --arg passphrase \"${passphrase}\" \\\\n            --arg recipient \"${recipient}\" \\\\n            --arg encryption_attributes \"${encryption_attributes}\" \\\\n            --arg decryption_attributes \"${decryption_attributes}\" \\\\n            '{\\n                \"name\": $name,\\n                \"executableFullPath\": $path,\\n                \"passphrase\": $passphrase,\\n                \"recipient\": $recipient,\\n                \"encryptionAttributes\": $encryption_attributes,\\n                \"decryptionAttributes\": $decryption_attributes\\n        }' >\"${file}\"\\n    }\\n\\n    function create_json_file_adv() {\\n        local name=\"${1}\"\\n        local executable_path=\"${2}\"\\n        local secret=\"${3}\"\\n        local recipient=\"${4}\"\\n        local encryption_attributes=\"${5}\"\\n        local decryption_attributes=\"${6}\"\\n        local file=\"${7}\"\\n\\n        jq -n \\\\n            --arg name \"${name}\" \\\\n            --arg path \"${executable_path}\" \\\\n            --arg secret \"${secret}\" \\\\n            --arg recipient \"${recipient}\" \\\\n            --arg encryption_attributes \"${encryption_attributes}\" \\\\n            --arg decryption_attributes \"${decryption_attributes}\" \\\\n            '{\\n                \"name\": $name,\\n                \"executableFullPath\": $path,\\n                \"passphrase\": {\\n                        \"Secret\": $secret\\n                    },\\n                \"recipient\": $recipient,\\n                \"encryptionAttributes\": $encryption_attributes,\\n                \"decryptionAttributes\": $decryption_attributes\\n            }' >\"${file}\"\\n    }\\n\\n    GPG_ATTRIBUTES_ENCRYPTION=\"-v --batch --yes --armor --recipient \\$\\$PGP_RECIPIENT\\$\\$ --output \\$\\$PGP_OUTPUT_FILE\\$\\$ --encrypt \\$\\$PGP_INPUT_FILE\\$\\$\"\\n    GPG_ATTRIBUTES_DECRYPTION=\"-v --batch --yes --passphrase \\$\\$PGP_PASSPHRASE\\$\\$ --pinentry-mode loopback --output \\$\\$PGP_OUTPUT_FILE\\$\\$ --decrypt \\$\\$PGP_INPUT_FILE\\$\\$\"\\n\\n    create_json_file \"${CTM_GPG_TEMPLATE_NAME}\" \"${GPG_BIN_PATH}\" \"${GPG_KEY_PASSPHRASE}\" \"${GPG_KEY_RECIPIENT}\" \"${GPG_ATTRIBUTES_ENCRYPTION}\" \"${GPG_ATTRIBUTES_DECRYPTION}\" \"${GPG_KEY_TEMPLATE_PATH}\"\\n\\n    UPDATED_DATA=$(echo \"${GPG_UPDATE_DATA}\" | jq --arg name \"${CTM_GPG_TEMPLATE_NAME}\" --arg file \"${GPG_KEY_TEMPLATE_PATH}\" --arg secret \"${CTM_SECRET_NAME}\" '.template += {\"name\": $name, \"file\": $file, \"secret\": $secret}')\\n\\n    # Write the updated data to the specified variable\\n    GPG_UPDATE_DATA=\"${UPDATED_DATA}\"\\n\\n    # Create CTM secret\\n    API_ACTION=\"ctm config secret::delete\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(ctm config secret::delete \"${CTM_SECRET_NAME}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n    log_with_timestamp \"${AWS_PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n\\n    API_ACTION=\"ctm config secret::add\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(ctm config secret::add \"${CTM_SECRET_NAME}\" \"${GPG_KEY_PASSPHRASE}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n    log_with_timestamp \"${AWS_PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n\\n    API_ACTION=\"gpg --list-keys --with-fingerprint --with-colons\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(gpg --list-keys --with-fingerprint --with-colons \"${GPG_KEY_RECIPIENT}\" 2>/dev/null)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_DETAILS=\"${API_RESULT}\"\\n\\n    API_ACTION=\"gpg --batch --list-keys --with-colons\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(gpg --batch --list-keys --with-colons \"${GPG_KEY_RECIPIENT}\" 2>/dev/null)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_LIST=\"${API_RESULT}\"\\n\\n    API_ACTION=\"grep, cut\"\\n    API_RESULT=$(echo \"${GPG_KEY_LIST}\" | grep \"^pub\" | cut -d \":\" -f 5)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_ID=\"${API_RESULT}\"\\n\\n    # printf \"  - GPG Key    :  %s\\n\" \"${GPG_KEY_ID_TEMP}\"\\n\\n    API_ACTION=\"gpg --fingerprint\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(gpg --fingerprint \"${GPG_KEY_ID}\" 2>/dev/null | grep -m1 '^uid')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_CMD_RESULT=\"${API_RESULT}\"\\n\\n    # shellcheck disable=SC2034 # this is intentional\\n    IFS=' ' read -r GPG_UID_LABEL GPG_UID_ATTRIBUTE_TEMP GPG_KEY_NAME GPG_KEY_EMAIL_TEMP <<<\"${GPG_CMD_RESULT}\"\\n\\n    API_ACTION=\"awk\"\\n    API_RESULT=$(echo \"${GPG_KEY_EMAIL_TEMP}\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | awk -F'<' '{print $2}' | awk -F'>' '{print $1}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"'${API_RESULT}'\"\\n    GPG_KEY_EMAIL=\"${API_RESULT}\"\\n\\n    API_ACTION=\"awk\"\\n    API_RESULT=$(echo \"${GPG_UID_ATTRIBUTE_TEMP}\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | awk -F'[' '{print $2}' | awk -F']' '{print $1}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"'${API_RESULT}'\"\\n    GPG_UID_ATTRIBUTE=\"${API_RESULT}\"\\n\\n    API_ACTION=\"grep, cut, awk\"\\n    API_RESULT=$(echo \"${GPG_KEY_DETAILS}\" | grep '^uid:' | cut -d':' -f10 | awk -F'<' '{print $1}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_NAME_TEMP=\"${API_RESULT}\"\\n\\n    API_ACTION=\"sed\"\\n    API_RESULT=$(echo \"${GPG_KEY_NAME_TEMP}\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | tr '\\n' ',' | sed 's/,$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_NAME=\"${API_RESULT}\"\\n\\n    API_ACTION=\"grep, cut, awk\"\\n    API_RESULT=$(echo \"${GPG_KEY_DETAILS}\" | grep '^uid:' | cut -d':' -f10 | awk -F'<' '{print $2}')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_EMAIL_TEMP=\"${API_RESULT}\"\\n\\n    API_ACTION=\"sed\"\\n    API_RESULT=$(echo \"${GPG_KEY_EMAIL_TEMP}\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | tr '\\n' ',' | sed 's/,$//' | sed 's/>//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    GPG_KEY_EMAIL=\"${API_RESULT}\"\\n\\n    if [[ \"${GPG_UID_ATTRIBUTE}\" == *\"ultimate\"* ]]; then\\n        GPG_KEY_STATUS=\"TRUE\"\\n    else\\n        GPG_KEY_STATUS=\"FALSE\"\\n    fi\\n\\n    API_ACTION=\"Get Control-M Agent details\"\\n    echo \" \"\\n    echo -e \"  # Stage       -> ${API_ACTION}\"\\n    log_with_timestamp \"INFO\" \"Start\"\\n\\n    # Get first CTM server\\n    API_ACTION=\"ctm config servers::get\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(ctm config servers::get -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1 | jq -r '.[0].name')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    CTM_SERVER=\"${API_RESULT}\"\\n\\n    # Get all agent(s) on server\\n    API_ACTION=\"ctm config server:agents::get\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(ctm config server:agents::get \"${CTM_SERVER}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    CTM_AGENTS=\"${API_RESULT}\"\\n\\n    API_ACTION=\"jq map(select(.status == 'Available'))\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(echo \"${CTM_AGENTS}\" | jq -r '.agents | map(select(.status == \"Available\")) | length')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    CTM_AGENT_COUNT=\"${API_RESULT}\"\\n\\n    API_ACTION=\"jq .[].nodeid\"\\n    printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n    API_RESULT=$(echo \"${CTM_AGENTS}\" | jq -r '.agents | map(select(.status == \"Available\")) | .[].nodeid' | tr '\\n' ',' | sed 's/,$//')\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n    CTM_ACTIVE_AGENTS=\"${API_RESULT}\"\\n    CTM_ALL_ACTIVE_AGENTS=\"${API_RESULT}\"\\n\\n    # check if provided agent is active\\n    if [ -n \"${CTM_NODE}\" ]; then\\n        if [[ \"${CTM_ACTIVE_AGENTS}\" =~ (^|,)${CTM_NODE}($|,) ]]; then\\n            CTM_ACTIVE_AGENTS=\"${CTM_NODE}\"\\n        else\\n            CTM_ACTIVE_AGENTS=\"\"\\n        fi\\n    fi\\n\\n    if [ -n \"${ZZM_CTM_HOST_GROUP}\" ]; then\\n\\n        # Get all agent(s) on server in hostgroup\\n        API_ACTION=\"ctm config server:hostgroup:agents::get\"\\n        printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n        API_RESULT=$(ctm config server:hostgroup:agents::get \"${CTM_SERVER}\" \"${ZZM_CTM_HOST_GROUP}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n        log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n        CTM_AGENTS=\"${API_RESULT}\"\\n\\n        API_ACTION=\"jq .[].host\"\\n        printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n        API_RESULT=$(echo \"${CTM_AGENTS}\" | jq -r '.[].host' | paste -sd, -)\\n        log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n        CTM_ACTIVE_AGENTS=\"${API_RESULT}\"\\n        CTM_ALL_ACTIVE_AGENTS=\"${API_RESULT}\"\\n        CTM_NODE=\"based on host group\"\\n    fi\\n\\n    # Get MFT config for active agent\\n    IFS=',' read -ra CTM_AGENT_TEMP <<<\"${CTM_ACTIVE_AGENTS}\"\\n    for CTM_AGENT in \"${CTM_AGENT_TEMP[@]}\"; do\\n        printf \"\\n\"\\n        printf \" ---- Agent Evaluation ---- %s\\n\" \"${CTM_AGENT}\"\\n        API_ACTION=\"ctm config server:agent:mft:configuration::get\"\\n        printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n        API_RESULT=$(ctm config server:agent:mft:configuration::get \"${CTM_SERVER}\" \"${CTM_AGENT}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>/dev/null | jq -r '.pgpTempDir')\\n        log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n        CTM_CMD_RESULT=\"${API_RESULT}\"\\n\\n        if test -n \"${CTM_CMD_RESULT}\"; then\\n\\n            API_ACTION=\"ctm config server:agent:mft:pgptemplates::get\"\\n            printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n            API_RESULT=$(ctm config server:agent:mft:pgptemplates::get \"${CTM_SERVER}\" \"${CTM_AGENT}\" -s name=\"${CTM_GPG_TEMPLATE_NAME}\" -e \"${ZZM_CTM_ENVIRONMENT}\")\\n            log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n            CTM_CMD_RESULT=\"${API_RESULT}\"\\n\\n            API_RESULT=$(echo \"${CTM_CMD_RESULT}\" | jq '. | length')\\n            CTM_PGP_TEMPLATE_COUNT=\"${API_RESULT}\"\\n\\n            if [[ \"${CTM_PGP_TEMPLATE_COUNT}\" -ge 1 && \"${GPG_KEY_ACTION}\" != \"delete\" ]]; then\\n                API_ACTION=\"ctm config server:agent:mft:pgptemplate::update\"\\n                printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n                CTM_NOTES=\"Update Template: ${GPG_KEY_NAME} on ${CTM_SERVER}:${CTM_AGENT}\"\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CTM_NOTES}\"\\n\\n                API_RESULT=$(ctm config server:agent:mft:pgptemplate::update \"${CTM_SERVER}\" \"${CTM_AGENT}\" \"${CTM_GPG_TEMPLATE_NAME}\" -f \"${GPG_KEY_TEMPLATE_PATH}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n                API_RESULT_MESSAGE=$(echo \"${API_RESULT}\" | jq -r 'if has(\"message\") then .message elif has(\"errors\") then .errors[0].message else empty end')\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT_MESSAGE}\"\\n\\n                if [[ \"${API_RESULT_MESSAGE}\" == *\"successfully\"* ]]; then\\n                    CTM_PGP_STATUS=\"OK\"\\n                    printf \"\\n  - CTM Status   :  %s: %s\\n\" \"${CTM_NOTES}\" \"${CTM_PGP_STATUS}\"\\n                else\\n                    CTM_PGP_STATUS=\"Error\"\\n                    printf \"\\n  - CTM Status   :  %s: %s\\n\" \"${CTM_NOTES}\" \"${CTM_PGP_STATUS}\"\\n                fi\\n\\n            elif [[ \"${CTM_PGP_TEMPLATE_COUNT}\" -eq 0 && \"${GPG_KEY_ACTION}\" != \"delete\" ]]; then\\n                API_ACTION=\"ctm config server:agent:mft:pgptemplate::add\"\\n                printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n                CTM_NOTES=\"Deploy Template: ${CTM_GPG_TEMPLATE_NAME} on ${CTM_SERVER}:${CTM_AGENT}\"\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CTM_NOTES}\"\\n\\n                API_RESULT=$(ctm config server:agent:mft:pgptemplate::add \"${CTM_SERVER}\" \"${CTM_AGENT}\" \"${CTM_GPG_TEMPLATE_NAME}\" -f \"${GPG_KEY_TEMPLATE_PATH}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n                API_RESULT_MESSAGE=$(echo \"${API_RESULT}\" | jq -r 'if has(\"message\") then .message elif has(\"errors\") then .errors[0].message else empty end')\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT_MESSAGE}\"\\n\\n                if [[ \"${API_RESULT_MESSAGE}\" == *\"successfully\"* ]]; then\\n                    CTM_PGP_STATUS=\"OK\"\\n                    printf \"\\n  - CTM Status   :  %s: %s\\n\" \"${CTM_NOTES}\" \"${CTM_PGP_STATUS}\"\\n                else\\n                    CTM_PGP_STATUS=\"Error\"\\n                    printf \"\\n  - CTM Status   :  %s: %s\\n\" \"${CTM_NOTES}\" \"${CTM_PGP_STATUS}\"\\n                fi\\n\\n            elif [[ \"${CTM_PGP_TEMPLATE_COUNT}\" -ge 1 && \"${GPG_KEY_ACTION}\" == \"delete\" ]]; then\\n\\n                API_ACTION=\"ctm config secret::delete\"\\n                printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n                API_RESULT=$(ctm config secret::delete \"${CTM_SECRET_NAME}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n                log_with_timestamp \"${AWS_PROJECT_LOG_LEVEL}\" \"${API_RESULT}\"\\n\\n                API_ACTION=\"ctm config server:agent:mft:pgptemplate::delete\"\\n                printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n                CTM_NOTES=\"Delete Template: ${CTM_GPG_TEMPLATE_NAME} on ${CTM_SERVER}:${CTM_AGENT}\"\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CTM_NOTES}\"\\n\\n                API_RESULT=$(ctm config server:agent:mft:pgptemplate::delete \"${CTM_SERVER}\" \"${CTM_AGENT}\" \"${CTM_GPG_TEMPLATE_NAME}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n                API_RESULT_MESSAGE=$(echo \"${API_RESULT}\" | jq -r 'if has(\"message\") then .message elif has(\"errors\") then .errors[0].message else empty end')\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${API_RESULT_MESSAGE}\"\\n\\n                if [[ \"${API_RESULT_MESSAGE}\" == *\"successfully\"* ]]; then\\n                    CTM_PGP_STATUS=\"OK\"\\n                    printf \"\\n  - CTM Status   :  %s:${Green} %s\\n\" \"${CTM_NOTES}\" \"${CTM_PGP_STATUS}\"\\n                else\\n                    CTM_PGP_STATUS=\"Error\"\\n                    printf \"\\n  - CTM Status   :  %s: %s\\n\" \"${CTM_NOTES}\" \"${CTM_PGP_STATUS}\"\\n                fi\\n\\n            else\\n                API_ACTION=\"ctm config server:agent:mft:pgptemplates::no-action\"\\n                printf \"  > API Action   :  %s\\n\" \"${API_ACTION}\"\\n                CTM_NOTES=\"No action for Template: ${CTM_GPG_TEMPLATE_NAME} on ${CTM_SERVER}:${CTM_AGENT}\"\\n                log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CTM_NOTES}\"\\n                printf \"  - CTM Notes    : ${Green} %s\\n\" \"${CTM_NOTES}\"\\n                CTM_PGP_STATUS=\"N/A\"\\n            fi\\n        fi\\n    done\\n\\n    # shellcheck disable=SC2034 # this is intentionals\\n    CMD_RESULT=$(echo \"${GPG_UPDATE_DATA}\" | sudo tee \"${GPG_KEY_IMPORT_PATH_INFO}\")\\n    log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CMD_RESULT}\"\\n\\n    # Synch Source and Destination\\n    if [[ -d \"${GPG_KEY_WORKING_FOLDER}\" ]]; then\\n        CMD_RESULT=$(sudo rsync -av --progress \"${GPG_KEY_WORKING_FOLDER}/\" \"${GPG_KEY_IMPORT_SOURCE_PATH}/\")\\n        log_with_timestamp \"${PROJECT_LOG_LEVEL}\" \"${CMD_RESULT}\"\\n    fi\\n\\nfi\\n# log the result\\ndisplay_project_details\\n",
        "SubApplication" : "Onboarding %%ZZM_USER_ID",
        "FileName" : "zzm.gpg.deploy.template.sh",
        "Host" : "ZZM_AGT_HUB",
        "CreatedBy" : "emadmin",
        "Description" : "Deploey GPG Template for CCP",
        "RunAs" : "ctmag",
        "Application" : "ZZM %%ZZM_COMPANY",
        "Variables" : [ {
          "VAR_ZZM_USER_ID" : "%%ZZM_USER_ID"
        }, {
          "VAR_ZZM_USER_EMAIL" : "%%ZZM_USER_EMAIL"
        }, {
          "VAR_ZZM_CTM_ENVIRONMENT" : "%%ZZM_CTM_ENVIRONMENT"
        }, {
          "VAR_ZZM_CTM_HOST_GROUP" : "ZZM_AGT_HUB"
        }, {
          "VAR_ZZM_GPG_KEY_IMPORT_SOURCE_PATH" : "%%ZZM_GPG_KEY_IMPORT_SOURCE_PATH"
        }, {
          "VAR_ZZM_GPG_KEY_IMPORT_FILE_INFO" : "%%ZZM_GPG_INFO_FILE"
        } ],
        "When" : {
          "WeekDays" : [ "NONE" ],
          "MonthDays" : [ "NONE" ],
          "DaysRelation" : "OR"
        },
        "eventsToWaitFor" : {
          "Type" : "WaitForEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Import_Keys-TO-ZZM_GPG_Template_Deploy_%%SMART_ORDERID-190"
          } ]
        },
        "eventsToDelete" : {
          "Type" : "DeleteEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Import_Keys-TO-ZZM_GPG_Template_Deploy_%%SMART_ORDERID-190"
          } ]
        }
      },
      "ZZM GPG Transfer" : {
        "Type" : "Job:FileTransfer",
        "ConnectionProfileSrc" : "ZZM_LFS_AGT",
        "ConnectionProfileDest" : "ZZM_B2B_HUB",
        "SubApplication" : "Onboarding %%ZZM_USER_ID",
        "Host" : "ZZM_CORE",
        "Description" : "Transfer GPG keys to MFTE home directory of the user./dsse/scripts/data/gpg/%%ZZM_USER_NAME/dsse.gpg.priv.asc",
        "RunAs" : "ZZM_LFS_AGT+ZZM_B2B_HUB",
        "CreatedBy" : "emadmin",
        "Application" : "ZZM %%ZZM_COMPANY",
        "Variables" : [ {
          "FTP-LOSTYPE" : "Unix"
        }, {
          "FTP-CONNTYPE1" : "LOCAL"
        }, {
          "FTP-LHOST" : "localhost"
        }, {
          "FTP-LUSER" : "expert"
        }, {
          "FTP-ROSTYPE" : "Unix"
        }, {
          "FTP-CONNTYPE2" : "SFTP"
        }, {
          "FTP-RHOST" : "ctm-lin-hub.shytwr.local"
        }, {
          "FTP-RUSER" : "ctmag"
        }, {
          "FTP-OVERRIDE_WATCH_INTERVAL1" : "0"
        }, {
          "FTP-WATCH_INTERVAL1" : "30"
        }, {
          "FTP-OVERRIDE_WATCH_INTERVAL2" : "0"
        }, {
          "FTP-WATCH_INTERVAL2" : "30"
        }, {
          "FTP-OVERRIDE_WATCH_INTERVAL3" : "0"
        }, {
          "FTP-WATCH_INTERVAL3" : "30"
        }, {
          "FTP-CM_VER" : "9.0.21.200"
        } ],
        "FileTransfers" : [ {
          "TransferType" : "Binary",
          "TransferOption" : "SrcToDest",
          "Src" : "%%ZZM_GPG_PUBLIC_FILE_PATH",
          "Dest" : "/b2bhome/%%ZZM_USER_ID/onboarding/",
          "TIMELIMIT" : "0",
          "ABSTIME" : "0",
          "SRCOPT" : "0",
          "IF_EXIST" : "0",
          "DSTOPT" : "0",
          "UNIQUE" : "0",
          "RECURSIVE" : "0",
          "TRIM" : "1",
          "NULLFLDS" : "0",
          "VERNUM" : "0",
          "EXCLUDE_WILDCARD" : "0",
          "CASEIFS" : "0",
          "FileWatcherOptions" : {
            "UnitsOfTimeLimit" : "Minutes",
            "VariableType" : "Global"
          },
          "DestinationFilename" : {
            "ModifyCase" : "No"
          },
          "IncrementalTransfer" : {
            "MaxModificationAgeForFirstRunInHours" : "1"
          }
        }, {
          "TransferType" : "Binary",
          "TransferOption" : "SrcToDest",
          "Src" : "%%ZZM_GPG_PRIVATE_FILE_PATH",
          "Dest" : "/b2bhome/%%ZZM_USER_ID/onboarding/",
          "TIMELIMIT" : "0",
          "ABSTIME" : "0",
          "SRCOPT" : "0",
          "IF_EXIST" : "0",
          "DSTOPT" : "0",
          "UNIQUE" : "0",
          "RECURSIVE" : "0",
          "TRIM" : "1",
          "NULLFLDS" : "0",
          "VERNUM" : "0",
          "EXCLUDE_WILDCARD" : "0",
          "CASEIFS" : "0",
          "FileWatcherOptions" : {
            "UnitsOfTimeLimit" : "Minutes",
            "VariableType" : "Global"
          },
          "DestinationFilename" : {
            "ModifyCase" : "No"
          },
          "IncrementalTransfer" : {
            "MaxModificationAgeForFirstRunInHours" : "1"
          }
        }, {
          "TransferType" : "Binary",
          "TransferOption" : "SrcToDest",
          "Src" : "%%ZZM_GPG_INFO_FILE_PATH",
          "Dest" : "/b2bhome/%%ZZM_USER_ID/onboarding/",
          "TIMELIMIT" : "0",
          "ABSTIME" : "0",
          "SRCOPT" : "0",
          "IF_EXIST" : "0",
          "DSTOPT" : "0",
          "UNIQUE" : "0",
          "RECURSIVE" : "0",
          "TRIM" : "1",
          "NULLFLDS" : "0",
          "VERNUM" : "0",
          "EXCLUDE_WILDCARD" : "0",
          "CASEIFS" : "0",
          "FileWatcherOptions" : {
            "UnitsOfTimeLimit" : "Minutes",
            "VariableType" : "Global"
          },
          "DestinationFilename" : {
            "ModifyCase" : "No"
          },
          "IncrementalTransfer" : {
            "MaxModificationAgeForFirstRunInHours" : "1"
          }
        } ],
        "When" : {
          "WeekDays" : [ "NONE" ],
          "MonthDays" : [ "NONE" ],
          "DaysRelation" : "OR"
        },
        "eventsToWaitFor" : {
          "Type" : "WaitForEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Profile-TO-ZZM_GPG_Transfer_%%SMART_ORDERID-190"
          } ]
        },
        "eventsToAdd" : {
          "Type" : "AddEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Transfer-TO-ZZM_GPG_Clear_Agent_%%SMART_ORDERID-190"
          } ]
        },
        "eventsToDelete" : {
          "Type" : "DeleteEvents",
          "Events" : [ {
            "Event" : "ZZM_GPG_Profile-TO-ZZM_GPG_Transfer_%%SMART_ORDERID-190"
          } ]
        }
      },
      "eventsToWaitFor" : {
        "Type" : "WaitForEvents",
        "Events" : [ {
          "Event" : "ZZM_UC_B2B_NBRDNG_USR_SUB_SITE-TO-ZZM_UC_B2B_NBRDNG_USR_SUB_GPG_%%SMART_ORDERID-190"
        } ]
      },
      "eventsToAdd" : {
        "Type" : "AddEvents",
        "Events" : [ {
          "Event" : "ZZM_UC_B2B_NBRDNG_USR_SUB_GPG-TO-ZZM_Base_SLA_%%SMART_ORDERID-190"
        } ]
      },
      "eventsToDelete" : {
        "Type" : "DeleteEvents",
        "Events" : [ {
          "Event" : "ZZM_UC_B2B_NBRDNG_USR_SUB_SITE-TO-ZZM_UC_B2B_NBRDNG_USR_SUB_GPG_%%SMART_ORDERID-190"
        } ]
      }
    },
    "ZZM_UC_B2B_NBRDNG_USR_SUB_SITE" : {
      "Type" : "SubFolder",
      "SubApplication" : "Onboarding %%ZZM_USER_ID",
      "AdjustEvents" : false,
      "CreatedBy" : "emadmin",
      "RunAs" : "mftuser",
      "Application" : "ZZM %%ZZM_COMPANY",
      "When" : {
        "DaysRelation" : "OR",
        "RuleBasedCalendars" : {
          "Included" : [ "USE PARENT" ]
        }
      },
      "ZZM Onboarding User" : {
        "Type" : "Job:EmbeddedScript",
        "Script" : "#!/bin/bash\\nset +x\\n# shellcheck enable=require-variable-braces\\n# file name: zzm.b2b.user.onboarding.sh\\n################################################################################\\n# License                                                                      #\\n################################################################################\\nfunction license() {\\n    # On MAC update bash: https://scriptingosx.com/2019/02/install-bash-5-on-macos/\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" GPL-3.0-only or GPL-3.0-or-later\"\\n    printf '%s\\n' \" Copyright (c) 2021 BMC Software, Inc.\"\\n    printf '%s\\n' \" Author: Volker Scheithauer\"\\n    printf '%s\\n' \" E-Mail: orchestrator@bmc.com\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is free software: you can redistribute it and/or modify\"\\n    printf '%s\\n' \" it under the terms of the GNU General Public License as published by\"\\n    printf '%s\\n' \" the Free Software Foundation, either version 3 of the License, or\"\\n    printf '%s\\n' \" (at your option) any later version.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is distributed in the hope that it will be useful,\"\\n    printf '%s\\n' \" but WITHOUT ANY WARRANTY; without even the implied warranty of\"\\n    printf '%s\\n' \" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\"\\n    printf '%s\\n' \" GNU General Public License for more details.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" You should have received a copy of the GNU General Public License\"\\n    printf '%s\\n' \" along with this program.  If not, see <https://www.gnu.org/licenses/>.\"\\n}\\n\\nfunction ctmLogo() {\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \"  @@@@@@@   @@@@@@   @@@  @@@  @@@@@@@  @@@@@@@    @@@@@@   @@@                  @@@@@@@@@@   \"\\n    printf '%s\\n' \" @@@@@@@@  @@@@@@@@  @@@@ @@@  @@@@@@@  @@@@@@@@  @@@@@@@@  @@@                  @@@@@@@@@@@  \"\\n    printf '%s\\n' \" !@@       @@!  @@@  @@!@!@@@    @@!    @@!  @@@  @@!  @@@  @@!                  @@! @@! @@!  \"\\n    printf '%s\\n' \" !@!       !@!  @!@  !@!!@!@!    !@!    !@!  @!@  !@!  @!@  !@!                  !@! !@! !@!  \"\\n    printf '%s\\n' \" !@!       @!@  !@!  @!@ !!@!    @!!    @!@!!@!   @!@  !@!  @!!       @!@!@!@!@  @!! !!@ @!@  \"\\n    printf '%s\\n' \" !!!       !@!  !!!  !@!  !!!    !!!    !!@!@!    !@!  !!!  !!!       !!!@!@!!!  !@!   ! !@!  \"\\n    printf '%s\\n' \" :!!       !!:  !!!  !!:  !!!    !!:    !!: :!!   !!:  !!!  !!:                  !!:     !!:  \"\\n    printf '%s\\n' \" :!:       :!:  !:!  :!:  !:!    :!:    :!:  !:!  :!:  !:!   :!:                 :!:     :!:  \"\\n    printf '%s\\n' \"  ::: :::  ::::: ::   ::   ::     ::    ::   :::  ::::: ::   :: ::::             :::     ::   \"\\n    printf '%s\\n' \"  :: :: :   : :  :   ::    :      :      :   : :   : :  :   : :: : :              :      :    \"\\n    printf '%s\\n' \"\"\\n}\\n\\n# CTM default OS group name\\nCTM_GROUP=\"controlm\"\\n\\n# Get current script folder\\n# shellcheck disable=SC2046 # this is intentional\\nDIR_NAME=$(cd $(dirname \"${BASH_SOURCE[0]}\") && pwd)\\nDIR_PARENT_NAME=$(dirname \"$(dirname \"$(readlink -f \"${BASH_SOURCE[0]}\")\")\")\\n\\n# compute working and config dir\\n# check if write permission\\nif [ -w \"${DIR_PARENT_NAME}\" ]; then\\n    WORKING_DIR=\"${DIR_PARENT_NAME}/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nelse\\n    WORKING_DIR=\"/tmp/zzm/data\"\\n    CONFIG_DIR=\"${DIR_PARENT_NAME}/config\"\\nfi\\n\\n# create working directory\\nif [ ! -d \"${WORKING_DIR}\" ]; then\\n    mkdir -p \"${WORKING_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${WORKING_DIR}\" -R\\n    chmod g+wrx \"${WORKING_DIR}\" -R\\nfi\\n\\nSCRIPT_SETTINGS=\"${CONFIG_DIR}/setup.settings.ini\"\\n# shellcheck disable=SC2034 # this is intentional\\nSCRIPT_DATA_FILE=\"${CONFIG_DIR}/data.json\"\\n\\n# Reset Colors\\n# shellcheck disable=SC2034 # this is intentional\\nColor_Off='\\033[0m' # Text Reset\\n\\n# Regular Colors\\n# shellcheck disable=SC2034 # this is intentional\\nBlack='\\033[0;30m' # Black\\n# shellcheck disable=SC2034 # this is intentional\\nRed='\\033[0;31m' # Red\\n# shellcheck disable=SC2034 # this is intentional\\nGreen='\\033[0;32m' # Green\\n# shellcheck disable=SC2034 # this is intentional\\nYellow='\\033[0;33m' # Yellow\\n# shellcheck disable=SC2034 # this is intentional\\nBlue='\\033[0;34m' # Blue\\n# shellcheck disable=SC2034 # this is intentional\\nPurple='\\033[0;35m' # Purple\\n# shellcheck disable=SC2034 # this is intentional\\nCyan='\\033[0;36m' # Cyan\\n# shellcheck disable=SC2034 # this is intentional\\nWhite='\\033[0;37m' # White\\n\\n# import bash colors\\nif [[ -f \"${SCRIPT_SETTINGS}\" ]]; then\\n    # shellcheck disable=SC1090 disable=SC2283 # this is intentional\\n    source <(grep = \"${SCRIPT_SETTINGS}\")\\nfi\\n\\n# Script defaults\\n# shellcheck disable=SC2034 # this is intentional\\nretcode=0\\n# shellcheck disable=SC2034 # this is intentional\\nSETUP_DIR=\"${DIR_NAME}\"\\n# shellcheck disable=SC2034 # this is intentional\\nSUDO_STATE=\"false\"\\n# shellcheck disable=SC2116 # this is intentional\\nSCRIPT_SHELL=$(echo \"${SHELL}\")\\n\\n# hostname is assumed to be a FQDN set during installation.\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_FQDN=$(cat /etc/hostname)\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $1}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nDOMAIN_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $2\".\"$3}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_IPV4=$(ip address | grep -v \"127.0.0\" | grep \"inet \" | awk '{print $2}' | awk -F \"/\" '{print $1}' | head -n 1)\\n\\nDATE_TODAY=\"$(date '+%Y-%m-%d %H:%M:%S')\"\\nLOG_DATE=$(date +%Y%m%d)\\n\\n# check if write permission\\nif [ -w \"/var/log\" ]; then\\n    LOG_DIR=\"/var/log/zzm\"\\nelse\\n    LOG_DIR=\"${WORKING_DIR}/log\"\\nfi\\n\\nif [ ! -d \"${LOG_DIR}\" ]; then\\n    mkdir -p \"${LOG_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${LOG_DIR}\" -R\\nfi\\n\\nJOBS_DIR=\"${WORKING_DIR}/jobs\"\\nif [ ! -d \"${JOBS_DIR}\" ]; then\\n    mkdir -p \"${JOBS_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER}\":\"${CTM_GROUP}\" \"${JOBS_DIR}\" -R\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nLOG_NAME=$(basename $0)\\nLOG_FILE=\"${LOG_DIR}/${LOG_NAME}.${LOG_DATE}.txt\"\\nif [[ ! -f \"${LOG_FILE}\" ]]; then\\n    echo ' .' | tee -a \"${LOG_FILE}\"\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nSCRIPT_NAME=\"${LOG_NAME}\"\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nSCRIPT_PURPOSE=\"onboard MFTE users\"\\n\\n# Options\\n# -c %%HCLS_COMPANY\\n# -e %%HCLS_USER_EMAIL\\n# -f %%HCLS_VIRTUAL_FOLDER\\n# -g %%HCLS_GROUP\\n# -u %%HCLS_USER_NAME\\n# -s %%B4B_SHARED_VIRTUAL_FOLDER\\n# -p %%HCLS_PREFIX\\n# -y %%B4B_SITE\\n# -z %%ZZM_CTM_ENVIRONMENT\\n# /opt/bmcs/scripts/mps.b2b.user.onboarding.sh --company '%%HCLS_COMPANY' --email %%HCLS_USER_EMAIL --folder '%%HCLS_VIRTUAL_FOLDER' --user %%HCLS_USER_NAME --site %%B4B_SITE --prefix '%%HCLS_PREFIX' --shared '%%B4B_SHARED_VIRTUAL_FOLDER' --environment %%ZZM_CTM_ENVIRONMENT\\n#    /dsse/scripts/dsse.b2b.user.onboarding.sh --company '%%ZZM_COMPANY' --email %%ZZM_USER_EMAIL --folder '%%ZZM_B2B_VIRTUAL_FOLDER' --user %%ZZM_USER_ID --site %%ZZM_ZZM_B2B_SITE --prefix '%%ZZM_PREFIX' --shared '%%ZZM_B2B_SHARED_VIRTUAL_FOLDER' --environment %%ZZM_CTM_ENVIRONMENT\\nctmLogo\\n\\n# Extract the script parameters / shell variables\\n# CTM OS Job variables\\n\\n# VAR_ZZM_COMPANY -> %%ZZM_COMPANY\\n# VAR_ZZM_USER_ID -> %%ZZM_USER_ID\\n# VAR_ZZM_USER_EMAIL-> %%ZZM_USER_EMAIL\\n# VAR_ZZM_ZZM_CTM_ENVIRONMENT -> %%ZZM_ZZM_CTM_ENVIRONMENT\\n\\n# VAR_ZZM_AWS_S3_BUCKET -> %%ZZM_AWS_S3_BUCKET\\n# VAR_ZZM_AZURE_CONTAINER -> %%ZZM_AZURE_CONTAINER\\n# VAR_ZZM_GCS_BUCKET -> %%ZZM_GCS_BUCKET\\n# VAR_ZZM_OCI_BUCKET -> %%ZZM_OCI_BUCKET\\n# VAR_ZZM_FILE_NAME -> %%ZZM_FILE_NAME\\n# VAR_ZZM_VIRTUAL_FOLDER -> %%ZZM_VIRTUAL_FOLDER\\n# VAR_ZZM_SUB_DIR_PATH -> %%ZZM_SUB_DIR_PATH\\n# VAR_ZZM_FILE_ABS_PATH -> %%ZZM_FILE_ABS_PATH\\n# VAR_ZZM_FILE_PATH -> %%ZZM_FILE_PATH\\n# VAR_ZZM_FILE_DIR -> %%ZZM_FILE_DIR\\n# VAR_ZZM_FILE_ABS_DIR -> %%ZZM_FILE_ABS_DIR\\n# VAR_ZZM_FILE_EXT_NO_DOT -> %%ZZM_FILE_EXT_NO_DOT\\n\\n# VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER -> %%ZZM_ZZM_B2B_VIRTUAL_FOLDER\\n# VAR_ZZM_B2B_GROUP -> %%ZZM_B2B_GROUP\\n# VAR_ZZM_ZZM_B2B_SITE -> %%ZZM_ZZM_B2B_SITE\\n# VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER -> %%ZZM_B2B_SHARED_VIRTUAL_FOLDER\\n\\n# initialize b2b variables\\nZZM_COMPANY=$(env | grep \"VAR_ZZM_COMPANY\" | awk -F \"=\" '{print $2}')\\nZZM_USER_ID=$(env | grep \"VAR_ZZM_USER_ID\" | awk -F \"=\" '{print $2}')\\nZZM_USER_EMAIL=$(env | grep \"VAR_ZZM_USER_EMAIL\" | awk -F \"=\" '{print $2}')\\nZZM_CTM_ENVIRONMENT=$(env | grep \"VAR_ZZM_CTM_ENVIRONMENT\" | awk -F \"=\" '{print $2}')\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AWS_S3_BUCKET=$(env | grep \"VAR_ZZM_AWS_S3_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AZURE_CONTAINER=$(env | grep \"VAR_ZZM_AZURE_CONTAINER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_GCS_BUCKET=$(env | grep \"VAR_ZZM_GCS_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_OCI_BUCKET=$(env | grep \"VAR_ZZM_OCI_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_NAME=$(env | grep \"VAR_ZZM_FILE_NAME\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_SUB_DIR_PATH=$(env | grep \"VAR_ZZM_SUB_DIR_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_PATH=$(env | grep \"VAR_ZZM_FILE_ABS_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_PATH=$(env | grep \"VAR_ZZM_FILE_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_DIR=$(env | grep \"VAR_ZZM_FILE_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_DIR=$(env | grep \"VAR_ZZM_FILE_ABS_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_EXT_NO_DOT=$(env | grep \"VAR_ZZM_FILE_EXT_NO_DOT\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_ZZM_B2B_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_GROUP=$(env | grep \"VAR_ZZM_B2B_GROUP\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SITE=$(env | grep \"VAR_ZZM_B2B_SITE\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SHARED_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n\\nlog() {\\n    echo \" -----------------------------------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" Start date          : ${DATE_TODAY}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Shell Name          : ${SCRIPT_SHELL}\" | tee -a \"${LOG_FILE}\"\\n    echo \" User Name           : ${USER}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host FDQN           : ${HOST_FQDN}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host Name           : ${HOST_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Host IPv4           : ${HOST_IPV4}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Script Folder       : ${DIR_NAME}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Working Folder      : ${WORKING_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Config Folder       : ${CONFIG_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" Log Folder          : ${LOG_DIR}\" | tee -a \"${LOG_FILE}\"\\n    echo \" CTM API Environment : ${ZZM_CTM_ENVIRONMENT}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Site            : ${ZZM_B2B_SITE}\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Company         : ${ZZM_COMPANY}\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Definition      : ${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B User            : ${ZZM_USER_ID}\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B User Password   : ${ZZM_USER_ID_PASSWORD}\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B E-Mail          : ${ZZM_USER_EMAIL}\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Virtual Folder  : ${ZZM_B2B_VIRTUAL_FOLDER}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Shared Folder   : ${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n    echo \"  \" | tee -a \"${LOG_FILE}\"\\n}\\n\\n# JSON Test\\nfunction check_b2b_data() {\\n    if [[ -z \"${1}\" ]]; then\\n        # Check if response is empty\\n        echo \"Response is empty.\"\\n        return\\n    elif [[ \"$(echo \"${1}\" | jq -r '.errors[0].message' 2>/dev/null)\" ]]; then\\n        # Check if response contains an error\\n        error_message=$(echo \"${1}\" | jq -r '.errors[0].message' 2>/dev/null)\\n        echo \"Response contains an error: ${error_message}\"\\n        return\\n    elif [[ \"$(echo \"${1}\" | jq length 2>/dev/null)\" -ne 0 ]]; then\\n        echo \"Response is valid.\"\\n        return\\n    elif [[ \"$(echo \"${1}\" | jq length 2>/dev/null)\" -eq 0 ]]; then\\n        # Check if response is null\\n        echo \"Response is null.\"\\n        return\\n    else\\n        echo \"Response is unknown.\"\\n        return\\n    fi\\n}\\n\\n# Write a JSON file with B2B settings\\nfunction write_temp_b2b_vf_file() {\\n    local name=\"${1}\"\\n    local user=\"${2}\"\\n    local temp_file\\n    temp_file=\"$(mktemp \"${WORKING_DIR}/b2b.v1.vf.${2}.XXXXXX.json\")\"\\n\\n    jq -n --arg name \"${name}\" --arg user \"${user}\" '{\\n        \"name\": $name,\\n        \"authorizedInternalUsers\": [\\n            \"*\"\\n        ],\\n        \"authorizedExternalUsersAndGroups\": [\\n            $user\\n        ],\\n        \"deleteFilesAfterDownload\": true,\\n        \"notifyByEmailWhenFileArrive\": true,\\n        \"retentionPolicy\": 0,\\n        \"sizeLimit\": 50,\\n        \"allowedFilePattern\": \"*\",\\n        \"blockedFilePattern\": \"*.exe, *.mp3, *.mp4, *.avi\"\\n    }' >\"${temp_file}\"\\n\\n    echo \"${temp_file}\"\\n}\\n\\n# Write a JSON file with B2B settings for new virtual folder definitions.\\nfunction write_temp_b2b_vf_file_gen2() {\\n    local name=\"${1}\"\\n    local user=\"${2}\"\\n    local temp_file\\n    temp_file=\"$(mktemp \"${WORKING_DIR}/b2b.v2.vf.${2}.XXXXXX.json\")\"\\n\\n    jq -n --arg name \"${name}\" --arg user \"${user}\" '{\\n    \"name\": $name,\\n    \"authorizedInternalUsers\": [\\n      \"*\"\\n    ],\\n    \"deleteFilesAfterDownload\": false,\\n    \"notifyByEmailWhenFileArrive\": true,\\n    \"retentionPolicy\": 24,\\n    \"sizeLimit\": 100,\\n    \"allowedFilePattern\": \"\",\\n    \"blockedFilePattern\":  \"*.exe, *.mp3, *.mp4, *.avi\",\\n    \"accessType\": \"Limited\",\\n    \"accessLevel\": \"Full control\",\\n    \"deleteFilesAfterDownloadByExternalUsers\": false,\\n    \"fixedSubFolders\": [\\n      {\\n        \"name\": \"incoming\",\\n        \"accessLevel\": \"Full control\",\\n        \"operation\": \"\",\\n        \"originalName\": \"\"\\n      },\\n      {\\n        \"name\": \"outgoing\",\\n        \"accessLevel\": \"Read only\",\\n        \"operation\": \"\",\\n        \"originalName\": \"\"\\n      },\\n      {\\n        \"name\": \"onboarding\",\\n        \"accessLevel\": \"Read only\",\\n        \"operation\": \"\",\\n        \"originalName\": \"\"\\n      }\\n    ],\\n    \"authorizedExternalUsersAndGroupsExtended\": [\\n      {\\n        \"name\": $user,\\n        \"accessLevel\": \"Full control\"\\n      }\\n    ]\\n }' >\"${temp_file}\"\\n\\n    echo \"${temp_file}\"\\n}\\n\\n# Write a JSON file with B2B user settings\\nfunction write_temp_ZZM_USER_ID_file() {\\n    local description=\"${1}\"\\n    local name=\"${2}\"\\n    local temp_file\\n    temp_file=\"$(mktemp \"${WORKING_DIR}/b2b.user.${name}.XXXXXX.json\")\"\\n\\n    jq -n --arg description \"${description}\" '{description: $description}' >\"${temp_file}\"\\n\\n    echo \"${temp_file}\"\\n}\\n\\n# Write a JSON file with B2B group settings\\nfunction write_temp_b2b_group_file() {\\n    local name=\"${1}\"\\n    local temp_file\\n    temp_file=\"$(mktemp \"${WORKING_DIR}/b2b.group.${name}.XXXXXX.json\")\"\\n\\n    jq -n --arg name \"${name}\" '{\"externalUsers\": [$name]}' >\"${temp_file}\"\\n\\n    echo \"${temp_file}\"\\n}\\n\\n# Write a JSON file with B2B settings\\nfunction write_temp_b2b_vf_group() {\\n    local name=\"${1}\"\\n    local group=\"${2}\"\\n    local temp_file\\n    temp_file=\"$(mktemp \"${WORKING_DIR}/b2b.vf.${2}.XXXXXX.json\")\"\\n\\n    jq -n \\\\n        --arg name \"${name}\" \\\\n        --arg group \"${group}\" \\\\n        '{ \\n            \"name\": $name,\\n            \"authorizedInternalUsers\": [\"*\"],\\n            \"authorizedExternalUsersAndGroups\": [$group],\\n            \"deleteFilesAfterDownload\": true,\\n            \"notifyByEmailWhenFileArrive\": true,\\n            \"retentionPolicy\": 0,\\n            \"sizeLimit\": 100,\\n            \"allowedFilePattern\": \"*\",\\n            \"blockedFilePattern\": \"*.exe, *.mp3, *.mp4, *.avi\",\\n            \"accessType\": \"Unlimited\"\\n        }' >\"${temp_file}\"\\n\\n    echo \"${temp_file}\"\\n}\\n\\n# Remove any white space from folder names\\nZZM_B2B_SHARED_VIRTUAL_FOLDER=\"${ZZM_B2B_SHARED_VIRTUAL_FOLDER// /}\"\\n\\n# Common variables\\nZZM_COMPANY_NSPACE=\"${ZZM_COMPANY// /}\"\\nZZM_USER_EMAIL=\"${ZZM_USER_EMAIL,,}\"\\n\\n# User Password Definition by default\\nZZM_USER_ID_PASSWORD=\"GENERATE_PASSWORD\"\\n\\n# Compute Virtual Folder\\nif [[ -z \"${ZZM_B2B_VIRTUAL_FOLDER}\" ]]; then\\n    TEMP_LCASE=$(echo \"${ZZM_USER_ID}\" | tr '[:upper:]' '[:lower:]')\\n    ZZM_B2B_VIRTUAL_FOLDER=\"${TEMP_LCASE// /}\"\\nelse\\n    TEMP_LCASE=$(echo \"${ZZM_B2B_VIRTUAL_FOLDER}\" | tr '[:upper:]' '[:lower:]')\\n    ZZM_B2B_VIRTUAL_FOLDER=\"${TEMP_LCASE// /}\"\\nfi\\n\\n# shellcheck disable=SC2236 # this is intentional\\nif [[ ! -z \"${B2B_PREFIX}\" ]]; then\\n    TEMP_LCASE=$(echo \"${B2B_PREFIX}\" | tr '[:upper:]' '[:lower:]')\\n    ZZM_B2B_VIRTUAL_FOLDER=\"${TEMP_LCASE}${ZZM_B2B_VIRTUAL_FOLDER}\"\\nfi\\n\\nlog\\n\\necho \" B2B Search ... \" | tee -a \"${LOG_FILE}\"\\nB2B_EXTERNAL_VERIFY_CMD=\"ctm config mfte:site:externalusers::get ${ZZM_B2B_SITE} -s email=${ZZM_USER_EMAIL} -e ${ZZM_CTM_ENVIRONMENT}\"\\necho \" B2B Search Command   : '${B2B_EXTERNAL_VERIFY_CMD}'\" | tee -a \"${LOG_FILE}\"\\n\\nB2B_EXTERNAL_VERIFY=$(ctm config mfte:site:externalusers::get \"${ZZM_B2B_SITE}\" -s email=\"${ZZM_USER_EMAIL}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\necho \" B2B Check ... \" | tee -a \"${LOG_FILE}\"\\nB2B_STATUS=$(check_b2b_data \"${B2B_EXTERNAL_VERIFY}\")\\n\\nif [[ \"${B2B_STATUS}\" == *\"Response contains an error\"* ]]; then\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\nelif [[ \"${B2B_STATUS}\" == *\"Response is empty\"* ]]; then\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Search Email     : '${ZZM_USER_EMAIL}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\nelif [[ \"${B2B_STATUS}\" == *\"Response is valid\"* ]]; then\\n    B2B_EXTERNAL_USER=$(echo \"${B2B_EXTERNAL_VERIFY}\" | jq -r '.[0].name')\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Search Message   : 'User exists'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B External User    : '${B2B_EXTERNAL_USER}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B External Email   : '${ZZM_USER_EMAIL}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\nelif [[ \"${B2B_STATUS}\" == *\"Response is null\"* ]]; then\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Search Message   : 'User does not exists'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Search Email     : '${ZZM_USER_EMAIL}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n\\n    # shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\n    B2B_EXTERNAL_USER=\"\"\\n\\n    # Create MFTE External User Account\\n    echo \"  \" | tee -a \"${LOG_FILE}\"\\n    echo \"  = Create B2B External user = \" | tee -a \"${LOG_FILE}\"\\n    TMP_JSON_FILE=\"$(write_temp_ZZM_USER_ID_file \"Temporary for: ${ZZM_USER_EMAIL}\" \"${ZZM_USER_ID}\")\"\\n    B2B_EXTERNAL_RESULT=$(ctm config mfte:site:externaluser::add \"${ZZM_B2B_SITE}\" \"${ZZM_USER_ID}\" \"${ZZM_USER_EMAIL}\" \"${ZZM_COMPANY}\" \"${ZZM_USER_ID_PASSWORD}\" -f \"${TMP_JSON_FILE}\" -e \"${ZZM_CTM_ENVIRONMENT}\" | jq -r '.message')\\n    # rm \"${TMP_JSON_FILE}\"\\n    echo \"  - B2B External Status externaluser add: '${B2B_EXTERNAL_RESULT}'\" | tee -a \"${LOG_FILE}\"\\n\\n    # lock all non-BMC accounts\\n    echo \"  \" | tee -a \"${LOG_FILE}\"\\n    echo \"  = Lock / Unlock B2B External user account = \" | tee -a \"${LOG_FILE}\"\\n    if [[ \"${ZZM_USER_EMAIL}\" == *\"@bmc.com\" || \"${ZZM_USER_EMAIL}\" == *\".local\" ]]; then\\n        B2B_EXTERNAL_RESULT=$(ctm config mfte:site:externaluser::unlock \"${ZZM_B2B_SITE}\" \"${ZZM_USER_ID}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n    else\\n        B2B_EXTERNAL_RESULT=$(ctm config mfte:site:externaluser::lock \"${ZZM_B2B_SITE}\" \"${ZZM_USER_ID}\" -e \"${ZZM_CTM_ENVIRONMENT}\")\\n    fi\\n\\n    B2B_EXTERNAL_STATUS_MESSAGE=$(echo \"${B2B_EXTERNAL_RESULT}\" | jq -r '.errors[0].message')\\n    if [[ \"${B2B_EXTERNAL_STATUS_MESSAGE}\" == *\"Failed\"* ]]; then\\n        B2B_EXTERNAL_STATUS=\"ERROR\"\\n    else\\n        B2B_EXTERNAL_STATUS=\"OK\"\\n    fi\\n\\n    # Check if user was created\\n    echo \"  \" | tee -a \"${LOG_FILE}\"\\n    echo \"  = Verify B2B External user = \" | tee -a \"${LOG_FILE}\"\\n    B2B_EXTERNAL_VERIFY=$(ctm config mfte:site:externalusers::get \"${ZZM_B2B_SITE}\" -s email=\"${ZZM_USER_EMAIL}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n    echo \"  - B2B Re-Check ... \" | tee -a \"${LOG_FILE}\"\\n    B2B_STATUS=$(check_b2b_data \"${B2B_EXTERNAL_VERIFY}\")\\n\\n    if [[ \"${B2B_STATUS}\" == *\"Response is valid\"* ]]; then\\n        B2B_EXTERNAL_USER=$(echo \"${B2B_EXTERNAL_VERIFY}\" | jq -r '.[0].name')\\n        echo \"  - B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n        echo \"  - B2B Search Message   : 'User exists'\" | tee -a \"${LOG_FILE}\"\\n        echo \"  - B2B External User    : '${B2B_EXTERNAL_USER}'\" | tee -a \"${LOG_FILE}\"\\n        echo \"  - B2B External Email   : '${ZZM_USER_EMAIL}'\" | tee -a \"${LOG_FILE}\"\\n\\n        # Virtual Folder for the User\\n        echo \"  \" | tee -a \"${LOG_FILE}\"\\n        echo \"  = Manage B2B External user's virtual folder = \" | tee -a \"${LOG_FILE}\"\\n        B2B_EXTERNAL_OBJECT=$(ctm config mfte:site:virtualfolders::get \"${ZZM_B2B_SITE}\" -s name=\"${ZZM_B2B_VIRTUAL_FOLDER}\" -e \"${ZZM_CTM_ENVIRONMENT}\" | jq -r '.[0].name')\\n\\n        if [[ \"${B2B_EXTERNAL_OBJECT}\" == \"${ZZM_B2B_VIRTUAL_FOLDER}\" ]]; then\\n            echo \"  - B2B External vFolder : '${B2B_EXTERNAL_OBJECT}'\" | tee -a \"${LOG_FILE}\"\\n        else\\n            # Create MFTE Virtual Directory\\n            TMP_JSON_FILE=\"$(write_temp_b2b_vf_file_gen2 \"${ZZM_USER_EMAIL}\" \"${ZZM_USER_ID}\")\"\\n            echo \"  - B2B External virtualfolder JSON: '${TMP_JSON_FILE}'\" | tee -a \"${LOG_FILE}\"\\n            echo \"  - B2B Creating virtualfolder: '${ZZM_B2B_VIRTUAL_FOLDER}'\" | tee -a \"${LOG_FILE}\"\\n\\n            B2B_EXTERNAL_RESULT=$(ctm config mfte:site:virtualfolder::add \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_VIRTUAL_FOLDER}\" -f \"${TMP_JSON_FILE}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n            B2B_EXTERNAL_STATUS_MESSAGE=$(echo \"${B2B_EXTERNAL_RESULT}\" | jq -r '.errors[0].message')\\n\\n            if [[ \"${B2B_EXTERNAL_STATUS_MESSAGE}\" == *\"problem\"* ]]; then\\n                B2B_EXTERNAL_STATUS=\"ERROR\"\\n            else\\n                B2B_EXTERNAL_STATUS=\"OK\"\\n            fi\\n\\n            # rm \"${TMP_JSON_FILE}\"\\n            echo \"  - B2B External Status virtualfolder add: '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n            echo \"  - B2B External Message virtualfolder add: '${B2B_EXTERNAL_STATUS_MESSAGE}'\" | tee -a \"${LOG_FILE}\"\\n\\n            # Associate Virtual Directory with User\\n            B2B_EXTERNAL_RESULT=$(ctm config mfte:site:virtualfolder:user::add \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_VIRTUAL_FOLDER}\" \"${ZZM_USER_ID}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\n            B2B_EXTERNAL_STATUS=$(echo \"${B2B_EXTERNAL_RESULT}\" | jq -r '.errors[0].message')\\n            echo \"  - B2B External Status virtualfolder association: '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n        fi\\n\\n        echo \"  \" | tee -a \"${LOG_FILE}\"\\n        echo \"  = Manage B2B External user group membership for personal virtual folder = \" | tee -a \"${LOG_FILE}\"\\n        # shellcheck disable=SC2236 # this is intentional\\n        if [[ ! -z \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" ]]; then\\n            # Create and configure group membership for user\\n            B2B_EXTERNAL_DATA=$(ctm config mfte:site:usergroups::get \"${ZZM_B2B_SITE}\" -s name=\"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\")\\n            B2B_EXTERNAL_OBJECT=$(echo \"${B2B_EXTERNAL_DATA}\" | jq -r '.[0].name')\\n\\n            if [[ \"${B2B_EXTERNAL_OBJECT}\" == \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" ]]; then\\n                # echo \"   - B2B External Group Data: '${B2B_EXTERNAL_DATA}'\" | tee -a \"${LOG_FILE}\"\\n\\n                # Add user to existing group, retain memebr list\\n                # B2B_EXTERNAL_OBJECT_TEMP=$(jq --arg user \"${ZZM_USER_ID}\" '.[].externalUsers[] | select(. == $user) catch empty' <<<\"${B2B_EXTERNAL_DATA}\")\\n                B2B_EXTERNAL_OBJECT_TEMP=$(jq -e --arg user \"${ZZM_USER_ID}\" 'try (.[].externalUsers[] | select(. == $user)) catch empty' <<<\"${B2B_EXTERNAL_DATA}\")\\n\\n                echo \"  - B2B External Group Status: '${B2B_EXTERNAL_OBJECT_TEMP}'\" | tee -a \"${LOG_FILE}\"\\n\\n                if [[ -n \"${B2B_EXTERNAL_OBJECT_TEMP}\" ]]; then\\n                    echo \"  - B2B User '${ZZM_USER_ID}' is present in the group ${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\"\\n                else\\n                    TMP_JSON_FILE=\"$(mktemp \"${WORKING_DIR}/b2b.group.${ZZM_B2B_SHARED_VIRTUAL_FOLDER}.XXXXXX.json\")\"\\n                    B2B_EXTERNAL_DATA=$(jq --arg user \"${ZZM_USER_ID}\" '.[0].externalUsers += [$user] | {externalUsers: .[0].externalUsers} // empty' <<<\"${B2B_EXTERNAL_DATA}\")\\n                    echo \"${B2B_EXTERNAL_DATA}\" >\"${TMP_JSON_FILE}\"\\n                    B2B_EXTERNAL_STATUS=$(ctm config mfte:site:usergroup::update \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" -f \"${TMP_JSON_FILE}\" -e \"${ZZM_CTM_ENVIRONMENT}\")\\n                    # rm \"${TMP_JSON_FILE}\"\\n                    echo \"  - B2B External Data group update : '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n\\n                fi\\n\\n            else\\n                echo \"  - B2B External Group missing : '${ZZM_B2B_SHARED_VIRTUAL_FOLDER}'\" | tee -a \"${LOG_FILE}\"\\n                # Add Group\\n                B2B_EXTERNAL_STATUS=$(ctm config mfte:site:usergroup::add \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" -e \"${ZZM_CTM_ENVIRONMENT}\" | jq -r '.message')\\n                echo \"  - B2B External Data group add : '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n\\n                # Update the Group\\n                TMP_JSON_FILE=\"$(write_temp_b2b_group_file \"${ZZM_USER_ID}\")\"\\n                B2B_EXTERNAL_STATUS=$(ctm config mfte:site:usergroup::update \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" -f \"${TMP_JSON_FILE}\" -e \"${ZZM_CTM_ENVIRONMENT}\" | jq -r '.message')\\n                # rm \"${TMP_JSON_FILE}\"\\n                echo \"  - B2B External Data group update : '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n            fi\\n\\n            # Virtual Folder for the Group\\n            B2B_EXTERNAL_OBJECT=$(ctm config mfte:site:virtualfolders::get \"${ZZM_B2B_SITE}\" -s name=\"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" | jq -r '.[0].name')\\n\\n            if [[ \"${B2B_EXTERNAL_OBJECT}\" == \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" ]]; then\\n                echo \"  - B2B External vFolder : '${B2B_EXTERNAL_OBJECT}'\" | tee -a \"${LOG_FILE}\"\\n                # Associate Virtual Directory with User\\n                B2B_EXTERNAL_STATUS=$(ctm config mfte:site:virtualfolder:user::add \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" | jq -r '.message')\\n                echo \"  - B2B External Status virtualfolder association: '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n            else\\n                # Create MFTE Virtual Directory\\n                TMP_JSON_FILE=\"$(write_temp_b2b_vf_group \"${ZZM_USER_EMAIL}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\")\"\\n                B2B_EXTERNAL_STATUS=$(ctm config mfte:site:virtualfolder::add \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" -f \"${TMP_JSON_FILE}\" | jq -r '.message')\\n                # rm \"${TMP_JSON_FILE}\"\\n                echo \"  - B2B External Status virtualfolder add: '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n\\n                # Associate Virtual Directory with Group\\n                B2B_EXTERNAL_STATUS=$(ctm config mfte:site:virtualfolder:user::add \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" -e \"${ZZM_CTM_ENVIRONMENT}\" | jq -r '.message')\\n                echo \"  - B2B External Status virtualfolder association: '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n            fi\\n        fi\\n\\n        # Virtual Folder for the Company\\n        echo \"  \" | tee -a \"${LOG_FILE}\"\\n        echo \"  = Manage B2B External company virtual folder = \" | tee -a \"${LOG_FILE}\"\\n        B2B_EXTERNAL_OBJECT=$(ctm config mfte:site:virtualfolders::get \"${ZZM_B2B_SITE}\" -s name=\"${ZZM_COMPANY_NSPACE}\" | jq -r '.[0].name')\\n\\n        if [[ \"${B2B_EXTERNAL_OBJECT}\" == \"${ZZM_COMPANY_NSPACE}\" ]]; then\\n            echo \"  - B2B External vFolder : '${B2B_EXTERNAL_OBJECT}'\" | tee -a \"${LOG_FILE}\"\\n            # Associate Virtual Directory with User\\n            B2B_EXTERNAL_STATUS=$(ctm config mfte:site:virtualfolder:user::add \"${ZZM_B2B_SITE}\" \"${ZZM_COMPANY_NSPACE}\" \"${ZZM_USER_ID}\" -e \"${ZZM_CTM_ENVIRONMENT}\" | jq -r '.message')\\n            echo \"  - B2B External Status virtualfolder association: '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n        else\\n            # Create MFTE Virtual Directory\\n            TMP_JSON_FILE=\"$(write_temp_b2b_vf_group \"${ZZM_USER_EMAIL}\" \"${ZZM_USER_ID}\")\"\\n            B2B_EXTERNAL_STATUS=$(ctm config mfte:site:virtualfolder::add \"${ZZM_B2B_SITE}\" \"${ZZM_COMPANY_NSPACE}\" -f \"${TMP_JSON_FILE}\" -e \"${ZZM_CTM_ENVIRONMENT}\" | jq -r '.message')\\n            # rm \"${TMP_JSON_FILE}\"\\n            echo \"  - B2B External Status virtualfolder add: '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n\\n            # Associate Virtual Directory with User\\n            B2B_EXTERNAL_STATUS=$(ctm config mfte:site:virtualfolder:user::add \"${ZZM_B2B_SITE}\" \"${ZZM_COMPANY_NSPACE}\" \"${ZZM_USER_ID}\" | jq -r '.message')\\n            echo \"  - B2B External Status virtualfolder association: '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n        fi\\n\\n        echo \"  \" | tee -a \"${LOG_FILE}\"\\n        echo \"  = Manage B2B External user group membership for shared virtual folder = \" | tee -a \"${LOG_FILE}\"\\n        # Configure group membership for user, add to global 'share folder'\\n        B2B_EXTERNAL_DATA=$(ctm config mfte:site:usergroups::get \"${ZZM_B2B_SITE}\" -s name=\"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\")\\n        B2B_EXTERNAL_OBJECT=$(echo \"${B2B_EXTERNAL_DATA}\" | jq -r '.[0].name')\\n\\n        # shellcheck disable=SC2006 disable=SC2236 # this is intentional\\n        if [[ ! -z \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" && \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" != \"None\" ]]; then\\n            if [[ \"${B2B_EXTERNAL_OBJECT}\" == \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" ]]; then\\n                # Add user to existing group, retain memebr list\\n                TMP_JSON_EXISTS=$(echo \"${B2B_EXTERNAL_DATA}\" | jq '.[0] | has(\"externalUsers\")')\\n\\n                # check group details and drive update\\n                if [[ \"${TMP_JSON_EXISTS}\" == \"true\" ]]; then\\n                    B2B_EXTERNAL_OBJECT_TEMP=$(jq -e --arg user \"${ZZM_USER_ID}\" 'try (.[].externalUsers[] | select(. == $user)) catch empty' <<<\"${B2B_EXTERNAL_DATA}\")\\n                    if [[ -n \"${B2B_EXTERNAL_OBJECT_TEMP}\" ]]; then\\n                        echo \"  - B2B User '${ZZM_USER_ID}' is present in the group ${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\"\\n                    else\\n                        # Update the Group\\n                        TMP_JSON_FILE=\"$(mktemp \"${WORKING_DIR}/b2b.group.${ZZM_B2B_SHARED_VIRTUAL_FOLDER}.XXXXXX.json\")\"\\n                        B2B_EXTERNAL_DATA=$(jq --arg user \"${ZZM_USER_ID}\" '.[0].externalUsers += [$user] | {externalUsers: .[0].externalUsers}' <<<\"${B2B_EXTERNAL_DATA}\")\\n                    fi\\n                    echo \"${B2B_EXTERNAL_DATA}\" >\"${TMP_JSON_FILE}\"\\n                    B2B_EXTERNAL_STATUS=$(ctm config mfte:site:usergroup::update \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" -f \"${TMP_JSON_FILE}\" | jq -r '.message')\\n                    # rm \"${TMP_JSON_FILE}\"\\n                    echo \"  - B2B External Data group update : '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n                else\\n                    echo \"  - B2B User '${ZZM_USER_ID}' is missing from group ${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\"\\n                    # Update the Group\\n                    TMP_JSON_FILE=\"$(mktemp \"${WORKING_DIR}/b2b.group.${ZZM_B2B_SHARED_VIRTUAL_FOLDER}.XXXXXX.json\")\"\\n                    B2B_EXTERNAL_DATA=$(jq --arg user \"${ZZM_USER_ID}\" '.[0].externalUsers += [$user] | {externalUsers: .[0].externalUsers}' <<<\"${B2B_EXTERNAL_DATA}\")\\n                    echo \"${B2B_EXTERNAL_DATA}\" >\"${TMP_JSON_FILE}\"\\n                    B2B_EXTERNAL_STATUS=$(ctm config mfte:site:usergroup::update \"${ZZM_B2B_SITE}\" \"${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\" -f \"${TMP_JSON_FILE}\" | jq -r '.message')\\n                    # rm \"${TMP_JSON_FILE}\"\\n                    echo \"  - B2B External Data group update : '${B2B_EXTERNAL_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n                fi\\n            fi\\n        fi\\n    fi\\nelse\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Data Status      : 'Unknown'\" | tee -a \"${LOG_FILE}\"\\n\\nfi\\n\\necho \"  \" | tee -a \"${LOG_FILE}\"\\necho \" ---------------------\" | tee -a \"${LOG_FILE}\"\\n",
        "SubApplication" : "Onboarding %%ZZM_USER_ID",
        "FileName" : "zzm.b2b.user.onboarding.sh",
        "Host" : "ZZM_CORE",
        "CreatedBy" : "emadmin",
        "Description" : "ZZM Onboarding of individual user via orderable service.",
        "RunAs" : "ctmag",
        "Application" : "ZZM %%ZZM_COMPANY",
        "Variables" : [ {
          "VAR_ZZM_COMPANY" : "%%ZZM_COMPANY"
        }, {
          "VAR_ZZM_USER_ID" : "%%ZZM_USER_ID"
        }, {
          "VAR_ZZM_USER_EMAIL" : "%%ZZM_USER_EMAIL"
        }, {
          "VAR_ZZM_CTM_ENVIRONMENT" : "%%ZZM_CTM_ENVIRONMENT"
        }, {
          "VAR_ZZM_ZZM_B2B_VIRTUAL_FOLDER" : "%%ZZM_ZZM_B2B_VIRTUAL_FOLDER"
        }, {
          "VAR_ZZM_B2B_GROUP" : "%%ZZM_B2B_GROUP"
        }, {
          "VAR_ZZM_B2B_SITE" : "%%ZZM_B2B_SITE"
        }, {
          "VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER" : "%%ZZM_B2B_SHARED_VIRTUAL_FOLDER"
        } ],
        "When" : {
          "WeekDays" : [ "NONE" ],
          "MonthDays" : [ "NONE" ],
          "DaysRelation" : "OR"
        }
      },
      "eventsToWaitFor" : {
        "Type" : "WaitForEvents",
        "Events" : [ {
          "Event" : "ZZM_ORDER_B2B_TRUE_%%SMART_ORDERID-190"
        } ]
      },
      "eventsToAdd" : {
        "Type" : "AddEvents",
        "Events" : [ {
          "Event" : "ZZM_UC_B2B_NBRDNG_USR_SUB_SITE-TO-ZZM_UC_B2B_NBRDNG_USR_SUB_GPG_%%SMART_ORDERID-190"
        } ]
      },
      "eventsToDelete" : {
        "Type" : "DeleteEvents",
        "Events" : [ {
          "Event" : "ZZM_ORDER_B2B_TRUE_%%SMART_ORDERID-190"
        } ]
      }
    },
    "ZZM Base SLA" : {
      "Type" : "Job:SLAManagement",
      "ServiceName" : "ZZM OnBoarding",
      "ServicePriority" : "3",
      "SubApplication" : "Onboarding %%ZZM_USER_ID",
      "EndFolder" : true,
      "Host" : "ZZM_CORE",
      "JobRunsDeviationsTolerance" : "3",
      "CreatedBy" : "emadmin",
      "RunAs" : "ctmag",
      "Application" : "ZZM %%ZZM_COMPANY",
      "CompleteIn" : {
        "Time" : "0:5"
      },
      "When" : {
        "WeekDays" : [ "NONE" ],
        "MonthDays" : [ "NONE" ],
        "DaysRelation" : "OR"
      },
      "eventsToWaitFor" : {
        "Type" : "WaitForEvents",
        "Events" : [ {
          "Event" : "ZZM_UC_B2B_NBRDNG_USR_SUB_GPG-TO-ZZM_Base_SLA_%%SMART_ORDERID-190"
        }, "OR", {
          "Event" : "ZZM_Bypass_Onboarding-TO-ZZM_Base_SLA_%%SMART_ORDERID-190"
        } ]
      },
      "eventsToDelete" : {
        "Type" : "DeleteEvents",
        "Events" : [ {
          "Event" : "ZZM_UC_B2B_NBRDNG_USR_SUB_GPG-TO-ZZM_Base_SLA_%%SMART_ORDERID-190"
        }, {
          "Event" : "ZZM_Bypass_Onboarding-TO-ZZM_Base_SLA_%%SMART_ORDERID-190"
        } ]
      }
    },
    "ZZM Bypass Onboarding" : {
      "Type" : "Job:Dummy",
      "SubApplication" : "Onboarding %%ZZM_USER_ID",
      "CreatedBy" : "emadmin",
      "RunAs" : "ctmag",
      "Application" : "ZZM %%ZZM_COMPANY",
      "When" : {
        "WeekDays" : [ "NONE" ],
        "MonthDays" : [ "ALL" ],
        "DaysRelation" : "OR"
      },
      "eventsToWaitFor" : {
        "Type" : "WaitForEvents",
        "Events" : [ {
          "Event" : "ZZM_ORDER_B2B_FALSE_%%SMART_ORDERID-190"
        } ]
      },
      "eventsToAdd" : {
        "Type" : "AddEvents",
        "Events" : [ {
          "Event" : "ZZM_Bypass_Onboarding-TO-ZZM_Base_SLA_%%SMART_ORDERID-190"
        } ]
      },
      "eventsToDelete" : {
        "Type" : "DeleteEvents",
        "Events" : [ {
          "Event" : "ZZM_ORDER_B2B_FALSE_%%SMART_ORDERID-190"
        } ]
      }
    },
    "ZZM PreFlight" : {
      "Type" : "Job:EmbeddedScript",
      "Script" : "#!/bin/bash\\nset +x\\n# shellcheck enable=require-variable-braces\\n# file name: zzm.b2b.onboarding.preflight.sh\\n################################################################################\\n# License                                                                      #\\n################################################################################\\n\\nfunction license() {\\n    # On MAC update bash: https://scriptingosx.com/2019/02/install-bash-5-on-macos/\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" GPL-3.0-only or GPL-3.0-or-later\"\\n    printf '%s\\n' \" Copyright (c) 2021 BMC Software, Inc.\"\\n    printf '%s\\n' \" Author: Volker Scheithauer\"\\n    printf '%s\\n' \" E-Mail: orchestrator@bmc.com\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is free software: you can redistribute it and/or modify\"\\n    printf '%s\\n' \" it under the terms of the GNU General Public License as published by\"\\n    printf '%s\\n' \" the Free Software Foundation, either version 3 of the License, or\"\\n    printf '%s\\n' \" (at your option) any later version.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" This program is distributed in the hope that it will be useful,\"\\n    printf '%s\\n' \" but WITHOUT ANY WARRANTY; without even the implied warranty of\"\\n    printf '%s\\n' \" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\"\\n    printf '%s\\n' \" GNU General Public License for more details.\"\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \" You should have received a copy of the GNU General Public License\"\\n    printf '%s\\n' \" along with this program.  If not, see <https://www.gnu.org/licenses/>.\"\\n}\\n\\nfunction ctmLogo() {\\n    printf '%s\\n' \"\"\\n    printf '%s\\n' \"  @@@@@@@   @@@@@@   @@@  @@@  @@@@@@@  @@@@@@@    @@@@@@   @@@                  @@@@@@@@@@   \"\\n    printf '%s\\n' \" @@@@@@@@  @@@@@@@@  @@@@ @@@  @@@@@@@  @@@@@@@@  @@@@@@@@  @@@                  @@@@@@@@@@@  \"\\n    printf '%s\\n' \" !@@       @@!  @@@  @@!@!@@@    @@!    @@!  @@@  @@!  @@@  @@!                  @@! @@! @@!  \"\\n    printf '%s\\n' \" !@!       !@!  @!@  !@!!@!@!    !@!    !@!  @!@  !@!  @!@  !@!                  !@! !@! !@!  \"\\n    printf '%s\\n' \" !@!       @!@  !@!  @!@ !!@!    @!!    @!@!!@!   @!@  !@!  @!!       @!@!@!@!@  @!! !!@ @!@  \"\\n    printf '%s\\n' \" !!!       !@!  !!!  !@!  !!!    !!!    !!@!@!    !@!  !!!  !!!       !!!@!@!!!  !@!   ! !@!  \"\\n    printf '%s\\n' \" :!!       !!:  !!!  !!:  !!!    !!:    !!: :!!   !!:  !!!  !!:                  !!:     !!:  \"\\n    printf '%s\\n' \" :!:       :!:  !:!  :!:  !:!    :!:    :!:  !:!  :!:  !:!   :!:                 :!:     :!:  \"\\n    printf '%s\\n' \"  ::: :::  ::::: ::   ::   ::     ::    ::   :::  ::::: ::   :: ::::             :::     ::   \"\\n    printf '%s\\n' \"  :: :: :   : :  :   ::    :      :      :   : :   : :  :   : :: : :              :      :    \"\\n    printf '%s\\n' \"\"\\n}\\n\\n# Get current script folder\\n# shellcheck disable=SC2046 # this is intentional\\nDIR_NAME=$(cd $(dirname \"${BASH_SOURCE[0]}\") && pwd)\\nDIR_NAME_PARENT=$(dirname \"${DIR_NAME}\")\\n\\n# shellcheck disable=SC2116 # this is intentionals\\nUSER_NAME=$(whoami)\\nUSER_HOME=$(getent passwd \"${USER_NAME}\" | cut -d: -f6)\\nUSER_AUTH_FILE=\"${USER_HOME}/.ssh/authorized_keys\"\\nUSER_RSA_FILE=\"${USER_HOME}/.ssh/id_rsa\"\\nUSER_GROUP=$(id -gn \"${USER_NAME}\")\\n\\n# SSH settings\\nif [[ -f \"${USER_HOME}/.ssh/id_rsa\" && -f \"${USER_HOME}/.ssh/id_rsa.pub\" ]]; then\\n    USER_RSA_STATUS=\"True\"\\n    USER_RSA_FINGER_PRINT=$(ssh-keygen -l -f \"${USER_HOME}/.ssh/id_rsa\")\\nelse\\n    USER_RSA_STATUS=\"False\"\\nfi\\n\\nif [[ -f \"${USER_HOME}/.ssh/id_rsa\" && -f \"${USER_HOME}/.ssh/id_rsa.pub\" ]]; then\\n    USER_RSA_AUTH_COUNT=$(wc -l <\"${USER_AUTH_FILE}\")\\nelse\\n    USER_RSA_AUTH_COUNT=\"False\"\\nfi\\n\\n# compute working dir\\n# check if write permission\\nif [ -w \"${DIR_NAME_PARENT}\" ]; then\\n    WORKING_DIR=\"${DIR_NAME_PARENT}/proclog\"\\nelse\\n    WORKING_DIR=\"/tmp/data\"\\nfi\\n\\n# create working directory\\nif [ ! -d \"${WORKING_DIR}\" ]; then\\n    mkdir -p \"${WORKING_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER_NAME}\":\"${USER_GROUP}\" \"${WORKING_DIR}\" -R\\nfi\\n\\n# logging configuration\\nDATE_TODAY=\"$(date '+%Y-%m-%d %H:%M:%S')\"\\nLOG_DATE=$(date +%Y%m%d)\\nLOG_DIR=\"${WORKING_DIR}/${HOST_NAME}\"\\n\\nif [ ! -d \"${LOG_DIR}\" ]; then\\n    mkdir -p \"${LOG_DIR}\"\\n    # shellcheck disable=SC2153 # this is intentional\\n    chown \"${USER_NAME}\":\"${USER_GROUP}\" \"${LOG_DIR}\" -R\\nfi\\n\\n# shellcheck disable=SC2006 disable=SC2086# this is intentional\\nLOG_NAME=$(basename $0)\\nLOG_FILE=\"${LOG_DIR}/${LOG_NAME}.${LOG_DATE}.txt\"\\nif [[ ! -f \"${LOG_FILE}\" ]]; then\\n    echo ' .' | tee -a \"${LOG_FILE}\"\\nfi\\n\\n# compute config dir\\nCONFIG_DIR=\"${DIR_NAME_PARENT}/data\"\\n\\n# shellcheck disable=SC2034 # this is intentional\\nSCRIPT_DATA_FILE=\"${CONFIG_DIR}/data.json\"\\n\\n# Script defaults\\n# shellcheck disable=SC2034 # this is intentional\\nretcode=0\\n# shellcheck disable=SC2034 # this is intentional\\nSETUP_DIR=\"${DIR_NAME_PARENT}\"\\n# shellcheck disable=SC2034 # this is intentional\\nSUDO_STATE=\"false\"\\n# shellcheck disable=SC2116 disable=SC2034 # this is intentional\\nSCRIPT_SHELL=$(echo \"${SHELL}\")\\n\\n# hostname is assumed to be a FQDN set during installation.\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_FQDN=$(cat /etc/hostname)\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $1}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nDOMAIN_NAME=$(echo ${HOST_FQDN} | awk -F \".\" '{print $2\".\"$3}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nHOST_IPV4=$(ip address | grep -v \"127.0.0\" | grep \"inet \" | awk '{print $2}' | awk -F \"/\" '{print $1}' | head -n 1)\\n\\n# keep track of deployment status\\n# shellcheck disable=SC2034 # this is intentional\\nSTATUS_FILE_PREFIX=\"${LOG_DIR}/${LOG_NAME}\"\\n\\n# Linux Distribution\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nDISTRIBUTION=$(cat /etc/*-release | uniq -u | grep \"^NAME\" | awk -F \"=\" '{ gsub(\"\\\"\", \"\",$2); print $2}')\\nDISTRIBUTION_PRETTY_NAME=$(cat /etc/*-release | uniq -u | grep \"^PRETTY_NAME\" | awk -F \"=\" '{ gsub(\"\\\"\", \"\",$2); print $2}')\\n\\n# JAVA version\\nJAVA_HOME=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.home'\" | awk -F \"= \" '{print $2}')\\nJAVA_VERSION=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.runtime.version'\" | awk -F \"= \" '{print $2}')\\nJAVA_RUNTIME=$(sh -c \"java -XshowSettings:properties -version 2>&1 > /dev/null | grep 'java.runtime.name'\" | awk -F \"= \" '{print $2}')\\n\\n# Show license\\nlicense\\nctmLogo\\n\\n# Extract the script parameters / shell variables\\n# CTM OS Job variables\\n\\n# VAR_ZZM_COMPANY -> %%ZZM_COMPANY\\n# VAR_ZZM_USER_ID -> %%ZZM_USER_ID\\n# VAR_ZZM_USER_EMAIL-> %%ZZM_USER_EMAIL\\n# VAR_ZZM_CTM_ENVIRONMENT -> %%ZZM_CTM_ENVIRONMENT\\n\\n# VAR_ZZM_AWS_S3_BUCKET -> %%ZZM_AWS_S3_BUCKET\\n# VAR_ZZM_AZURE_CONTAINER -> %%ZZM_AZURE_CONTAINER\\n# VAR_ZZM_GCS_BUCKET -> %%ZZM_GCS_BUCKET\\n# VAR_ZZM_OCI_BUCKET -> %%ZZM_OCI_BUCKET\\n# VAR_ZZM_FILE_NAME -> %%ZZM_FILE_NAME\\n# VAR_ZZM_VIRTUAL_FOLDER -> %%ZZM_VIRTUAL_FOLDER\\n# VAR_ZZM_SUB_DIR_PATH -> %%ZZM_SUB_DIR_PATH\\n# VAR_ZZM_FILE_ABS_PATH -> %%ZZM_FILE_ABS_PATH\\n# VAR_ZZM_FILE_PATH -> %%ZZM_FILE_PATH\\n# VAR_ZZM_FILE_DIR -> %%ZZM_FILE_DIR\\n# VAR_ZZM_FILE_ABS_DIR -> %%ZZM_FILE_ABS_DIR\\n# VAR_ZZM_FILE_EXT_NO_DOT -> %%ZZM_FILE_EXT_NO_DOT\\n\\n# VAR_ZZM_B2B_VIRTUAL_FOLDER -> %%ZZM_B2B_VIRTUAL_FOLDER\\n# VAR_ZZM_B2B_GROUP -> %%ZZM_B2B_GROUP\\n# VAR_ZZM_B2B_SITE -> %%ZZM_B2B_SITE\\n# VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER -> %%ZZM_B2B_SHARED_VIRTUAL_FOLDER\\n\\n# initialize b2b variables\\nZZM_COMPANY=$(env | grep \"VAR_ZZM_COMPANY\" | awk -F \"=\" '{print $2}')\\nZZM_USER_ID=$(env | grep \"VAR_ZZM_USER_ID\" | awk -F \"=\" '{print $2}')\\nZZM_USER_EMAIL=$(env | grep \"VAR_ZZM_USER_EMAIL\" | awk -F \"=\" '{print $2}')\\nZZM_CTM_ENVIRONMENT=$(env | grep \"VAR_ZZM_CTM_ENVIRONMENT\" | awk -F \"=\" '{print $2}')\\n\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AWS_S3_BUCKET=$(env | grep \"VAR_ZZM_AWS_S3_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_AZURE_CONTAINER=$(env | grep \"VAR_ZZM_AZURE_CONTAINER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_GCS_BUCKET=$(env | grep \"VAR_ZZM_GCS_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_OCI_BUCKET=$(env | grep \"VAR_ZZM_OCI_BUCKET\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_NAME=$(env | grep \"VAR_ZZM_FILE_NAME\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_SUB_DIR_PATH=$(env | grep \"VAR_ZZM_SUB_DIR_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_PATH=$(env | grep \"VAR_ZZM_FILE_ABS_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_PATH=$(env | grep \"VAR_ZZM_FILE_PATH\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_DIR=$(env | grep \"VAR_ZZM_FILE_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_ABS_DIR=$(env | grep \"VAR_ZZM_FILE_ABS_DIR\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_FILE_EXT_NO_DOT=$(env | grep \"VAR_ZZM_FILE_EXT_NO_DOT\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_B2B_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_GROUP=$(env | grep \"VAR_ZZM_B2B_GROUP\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SITE=$(env | grep \"VAR_ZZM_B2B_SITE\" | awk -F \"=\" '{print $2}')\\n# shellcheck disable=SC2006 disable=SC2086 disable=SC2034 # this is intentional\\nZZM_B2B_SHARED_VIRTUAL_FOLDER=$(env | grep \"VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER\" | awk -F \"=\" '{print $2}')\\n\\nif [ -z \"${SCRIPT_PURPOSE}\" ]; then\\n    SCRIPT_PURPOSE=\"B2B User Information\"\\nfi\\n\\n# JSON Test\\nfunction check_b2b_data() {\\n    if [[ -z \"${1}\" ]]; then\\n        # Check if response is empty\\n        echo \"Response is empty.\"\\n        return\\n    elif [[ \"$(echo \"${1}\" | jq -r '.errors[0].message' 2>/dev/null)\" ]]; then\\n        # Check if response contains an error\\n        error_message=$(echo \"${1}\" | jq -r '.errors[0].message' 2>/dev/null)\\n        echo \"Response contains an error: ${error_message}\"\\n        return\\n    elif [[ \"$(echo \"${1}\" | jq length 2>/dev/null)\" -ne 0 ]]; then\\n        echo \"Response is valid.\"\\n        return\\n    elif [[ \"$(echo \"${1}\" | jq length 2>/dev/null)\" -eq 0 ]]; then\\n        # Check if response is null\\n        echo \"Response is null.\"\\n        return\\n    else\\n        echo \"Response is unknown.\"\\n        return\\n    fi\\n}\\n\\necho \" \"\\necho \" ${SCRIPT_PURPOSE}\"\\necho \" -----------------------------------------------\"\\necho -e \" Date           : ${DATE_TODAY}\"\\necho -e \" Distribution   : ${DISTRIBUTION_PRETTY_NAME}\"\\necho -e \" Current User   : ${USER}\"\\necho -e \" Sudo Mode      : ${SUDO_STATE}\"\\necho -e \" Domain Name    : ${DOMAIN_NAME}\"\\necho -e \" Host FDQN      : ${HOST_FQDN}\"\\necho -e \" Host Name      : ${HOST_NAME}\"\\necho -e \" Host IPv4      : ${HOST_IPV4}\"\\necho -e \" Script Folder  : ${DIR_NAME}\"\\necho -e \" Working Folder : ${WORKING_DIR}\"\\necho -e \" Config Folder  : ${CONFIG_DIR}\"\\necho -e \" Log Folder     : ${LOG_DIR}\"\\necho -e \" CTM API Env    : ${CTM_ENVIRONMENT}\"\\necho \" ---------------------\"\\necho -e \" Data File      : ${SCRIPT_DATA_FILE}\"\\necho -e \" Data Folder    : ${CONFIG_DIR}\"\\necho -e \" JAVA Version   : ${JAVA_VERSION}\"\\necho -e \" JAVA RunTime   : ${JAVA_RUNTIME}\"\\necho -e \" JAVA Home      : ${JAVA_HOME}\"\\necho \" -----------------------------------------------\"\\n\\n# echo variables for user and group\\necho -e \" Group Name    : ${USER_GROUP}\"\\necho -e \" User Name     : ${USER_NAME}\"\\necho -e \" User Home     : ${USER_HOME}\"\\necho -e \" SSH Key       : ${USER_RSA_FILE}\"\\necho -e \" SSH Auth      : ${USER_AUTH_FILE}\"\\necho -e \" SSH Status    : ${USER_RSA_STATUS}\"\\necho -e \" SSH FPrint    : ${USER_RSA_FINGER_PRINT}\"\\necho -e \" SSH Auth #    : ${USER_RSA_AUTH_COUNT}\"\\necho \" ---------------------\"\\necho -e \" Company       : ${ZZM_COMPANY}\"\\necho -e \" User ID       : ${ZZM_USER_ID}\"\\necho -e \" User E-Mail   : ${ZZM_USER_EMAIL}\"\\necho -e \" B2B vFolder   : ${ZZM_B2B_VIRTUAL_FOLDER}\"\\necho -e \" B2B sFolder   : ${ZZM_B2B_SHARED_VIRTUAL_FOLDER}\"\\necho -e \" B2B Group     : ${ZZM_B2B_GROUP}\"\\necho -e \" B2B Site      : ${ZZM_B2B_SITE}\"\\necho -e \" CTM Env       : ${ZZM_CTM_ENVIRONMENT}\"\\necho \" -----------------------------------------------\"\\necho \" B2B Search ... \" | tee -a \"${LOG_FILE}\"\\nB2B_EXTERNAL_VERIFY_CMD=\"ctm config mfte:site:externalusers::get ${ZZM_B2B_SITE} -s email=${ZZM_USER_EMAIL} -e ${ZZM_CTM_ENVIRONMENT}\"\\necho \" B2B Search Command   : '${B2B_EXTERNAL_VERIFY_CMD}'\" | tee -a \"${LOG_FILE}\"\\n\\nB2B_EXTERNAL_VERIFY=$(ctm config mfte:site:externalusers::get \"${ZZM_B2B_SITE}\" -s email=\"${ZZM_USER_EMAIL}\" -e \"${ZZM_CTM_ENVIRONMENT}\" 2>&1)\\necho \" B2B Check ... \" | tee -a \"${LOG_FILE}\"\\nB2B_STATUS=$(check_b2b_data \"${B2B_EXTERNAL_VERIFY}\")\\n\\nif [[ \"${B2B_STATUS}\" == *\"Response contains an error\"* ]]; then\\n    B2B_USER_STATUS=\"ERROR\"\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\nelif [[ \"${B2B_STATUS}\" == *\"Response is empty\"* ]]; then\\n    B2B_USER_STATUS=\"ERROR\"\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Search Email     : '${B2B_USER_EMAIL}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\nelif [[ \"${B2B_STATUS}\" == *\"Response is valid\"* ]]; then\\n    B2B_USER_STATUS=\"ERROR\"\\n    B2B_EXTERNAL_USER=$(echo \"${B2B_EXTERNAL_VERIFY}\" | jq -r '.[0].name')\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Search Message   : 'User exists'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B External User    : '${B2B_EXTERNAL_USER}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B External Email   : '${ZZM_USER_EMAIL}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\nelif [[ \"${B2B_STATUS}\" == *\"Response is null\"* ]]; then\\n    B2B_USER_STATUS=\"OK\"\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Search Message   : 'User does not exists'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Search Email     : '${ZZM_USER_EMAIL}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" ---------------------\" | tee -a \"${LOG_FILE}\"\\nelse\\n    B2B_USER_STATUS=\"ERROR\"\\n    echo \" B2B Search Status    : '${B2B_STATUS}'\" | tee -a \"${LOG_FILE}\"\\n    echo \" B2B Data Status      : 'Unknown'\" | tee -a \"${LOG_FILE}\"\\nfi\\n\\necho \" \"\\necho -e \" Status: ${B2B_USER_STATUS}\"\\necho \" -----------------------------------------------\"\\necho \" \"\\n",
      "SubApplication" : "Onboarding %%ZZM_USER_ID",
      "FileName" : "zzm.b2b.onboarding.preflight.sh",
      "Host" : "ZZM_CORE",
      "CreatedBy" : "emadmin",
      "Description" : "ZZM Onboarding PreFlight checks",
      "RunAs" : "ctmag",
      "Application" : "ZZM %%ZZM_COMPANY",
      "Variables" : [ {
        "VAR_ZZM_COMPANY" : "%%ZZM_COMPANY"
      }, {
        "VAR_ZZM_USER_ID" : "%%ZZM_USER_ID"
      }, {
        "VAR_ZZM_USER_EMAIL" : "%%ZZM_USER_EMAIL"
      }, {
        "VAR_ZZM_CTM_ENVIRONMENT" : "%%ZZM_CTM_ENVIRONMENT"
      }, {
        "VAR_ZZM_B2B_VIRTUAL_FOLDER" : "%%ZZM_B2B_VIRTUAL_FOLDER"
      }, {
        "VAR_ZZM_B2B_GROUP" : "%%ZZM_B2B_GROUP"
      }, {
        "VAR_ZZM_B2B_SITE" : "%%ZZM_B2B_SITE"
      }, {
        "VAR_ZZM_B2B_SHARED_VIRTUAL_FOLDER" : "%%ZZM_B2B_SHARED_VIRTUAL_FOLDER"
      } ],
      "When" : {
        "WeekDays" : [ "NONE" ],
        "MonthDays" : [ "NONE" ],
        "DaysRelation" : "OR"
      },
      "IfBase:Folder:Output_8" : {
        "Type" : "If:Output",
        "Code" : "*Status: ERROR*",
        "Event:Add_0" : {
          "Type" : "Event:Add",
          "Event" : "ZZM_ORDER_B2B_FALSE_%%SMART_ORDERID-190"
        }
      },
      "IfBase:Folder:Output_9" : {
        "Type" : "If:Output",
        "Code" : "*Status: OK*",
        "Event:Add_0" : {
          "Type" : "Event:Add",
          "Event" : "ZZM_ORDER_B2B_TRUE_%%SMART_ORDERID-190"
        }
      }
    }
  }
}